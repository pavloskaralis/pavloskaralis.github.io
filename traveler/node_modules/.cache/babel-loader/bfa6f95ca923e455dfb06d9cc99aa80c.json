{"ast":null,"code":"var _jsxFileName = \"/Users/pavloskaralis/Desktop/pavloskaralis.github.io/traveler/src/components/Nav.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport toggleDropdown from '../actions/toggleDropdown.js';\nimport Dropdown from './Dropdown.js';\nconst NavStyle = styled.nav`\n    height: 60px;\n    width: 100%;\n    background-color: ${props => props.theme.black};\n    display: flex;\n    justify-content: space-between;\n    z-index: 3;\n\n    & h2 {\n        padding-left: 16px;\n        align-self: center;\n        margin: 0; \n        color: ${props => props.theme.orange};\n        font-family: Georgia;\n        cursor: default;\n        display:block;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        -o-text-overflow: ellipsis;\n    }\n`;\nconst DropdownContainer = styled.div`\n    height: 60px; \n    min-width: 60px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 20px 16px; \n    box-sizing: border-box;\n    cursor: pointer;  \n\n    & span {\n        height: 2px;\n        cursor: pointer;\n        background-color: white;\n        display: block;\n    }\n\n    &:hover span{\n        background-color: ${props => props.theme.gray};\n    }\n`;\n\nconst mapStateToProps = state => {\n  return {\n    dropdown: state.dropdown,\n    location: state.itinerary.location\n  };\n};\n\nconst mapDispatchToProps = {\n  toggleDropdown\n};\n\nlet Nav = ({\n  dropdown,\n  toggleDropdown,\n  location\n}) => {\n  const url = window.location.href;\n  const regex = new RegExp(/\\/\\d+\\/\\d+/); //detect current page by url\n\n  const showPage = regex.test(url) ? true : false; //title conditional based on current page and page loading state \n\n  let title;\n\n  if (!location && showPage) {\n    title = 'Loading...';\n  } else if (location && showPage) {\n    title = location.slice(0, 1).toUpperCase() + location.slice(1);\n  } else {\n    title = 'Traveler';\n  }\n\n  return (\n    /*#__PURE__*/\n    React.createElement(NavStyle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, title),\n    /*#__PURE__*/\n    React.createElement(DropdownContainer, {\n      onClick: () => toggleDropdown(!dropdown),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, \" \"),\n    /*#__PURE__*/\n    React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, \" \"),\n    /*#__PURE__*/\n    React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, \" \")), dropdown &&\n    /*#__PURE__*/\n    React.createElement(Dropdown, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 26\n      }\n    }))\n  );\n};\n\nNav = connect(mapStateToProps, mapDispatchToProps)(Nav);\nexport default Nav;","map":{"version":3,"sources":["/Users/pavloskaralis/Desktop/pavloskaralis.github.io/traveler/src/components/Nav.js"],"names":["React","connect","styled","toggleDropdown","Dropdown","NavStyle","nav","props","theme","black","orange","DropdownContainer","div","gray","mapStateToProps","state","dropdown","location","itinerary","mapDispatchToProps","Nav","url","window","href","regex","RegExp","showPage","test","title","slice","toUpperCase"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,MAAMC,QAAQ,GAAGH,MAAM,CAACI,GAAI;;;wBAGJC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,KAAM;;;;;;;;;iBASlCF,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYE,MAAO;;;;;;;;;CAZ7C;AAuBA,MAAMC,iBAAiB,GAAGT,MAAM,CAACU,GAAI;;;;;;;;;;;;;;;;;;4BAkBTL,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYK,IAAK;;CAlBtD;;AAsBA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,QAAQ,EAAED,KAAK,CAACC,QADb;AAEHC,IAAAA,QAAQ,EAAEF,KAAK,CAACG,SAAN,CAAgBD;AAFvB,GAAP;AAIH,CALD;;AAOA,MAAME,kBAAkB,GAAG;AACvBhB,EAAAA;AADuB,CAA3B;;AAIA,IAAIiB,GAAG,GAAG,CAAC;AAACJ,EAAAA,QAAD;AAAWb,EAAAA,cAAX;AAA2Bc,EAAAA;AAA3B,CAAD,KAA0C;AAEhD,QAAMI,GAAG,GAAGC,MAAM,CAACL,QAAP,CAAgBM,IAA5B;AACA,QAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAW,YAAX,CAAd,CAHgD,CAIhD;;AACA,QAAMC,QAAQ,GAAGF,KAAK,CAACG,IAAN,CAAWN,GAAX,IAAkB,IAAlB,GAAyB,KAA1C,CALgD,CAMhD;;AACA,MAAIO,KAAJ;;AACA,MAAG,CAACX,QAAD,IAAaS,QAAhB,EAA0B;AACtBE,IAAAA,KAAK,GAAG,YAAR;AACH,GAFD,MAEO,IAAIX,QAAQ,IAAIS,QAAhB,EAA0B;AAC7BE,IAAAA,KAAK,GAAGX,QAAQ,CAACY,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqBC,WAArB,KAAqCb,QAAQ,CAACY,KAAT,CAAe,CAAf,CAA7C;AACH,GAFM,MAEA;AACHD,IAAAA,KAAK,GAAG,UAAR;AACH;;AAED;AAAA;AACI,wBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,KAAL,CAFJ;AAAA;AAGI,wBAAC,iBAAD;AAAmB,MAAA,OAAO,EAAE,MAAMzB,cAAc,CAAC,CAACa,QAAF,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFJ;AAAA;AAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHJ;AAAA;AAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAJJ,CAHJ,EASKA,QAAQ;AAAA;AAAI,wBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATjB;AADJ;AAaH,CA7BD;;AA+BAI,GAAG,GAAGnB,OAAO,CACTa,eADS,EAETK,kBAFS,CAAP,CAGJC,GAHI,CAAN;AAKA,eAAeA,GAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport toggleDropdown from '../actions/toggleDropdown.js'\nimport Dropdown from './Dropdown.js'\n\nconst NavStyle = styled.nav`\n    height: 60px;\n    width: 100%;\n    background-color: ${props => props.theme.black};\n    display: flex;\n    justify-content: space-between;\n    z-index: 3;\n\n    & h2 {\n        padding-left: 16px;\n        align-self: center;\n        margin: 0; \n        color: ${props => props.theme.orange};\n        font-family: Georgia;\n        cursor: default;\n        display:block;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        -o-text-overflow: ellipsis;\n    }\n`;\n\nconst DropdownContainer = styled.div`\n    height: 60px; \n    min-width: 60px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    padding: 20px 16px; \n    box-sizing: border-box;\n    cursor: pointer;  \n\n    & span {\n        height: 2px;\n        cursor: pointer;\n        background-color: white;\n        display: block;\n    }\n\n    &:hover span{\n        background-color: ${props => props.theme.gray};\n    }\n`;\n\nconst mapStateToProps = state => {\n    return {\n        dropdown: state.dropdown,\n        location: state.itinerary.location\n    }\n}\n\nconst mapDispatchToProps = {\n    toggleDropdown\n}\n\nlet Nav = ({dropdown, toggleDropdown, location}) => {\n\n    const url = window.location.href;\n    const regex = new RegExp(/\\/\\d+\\/\\d+/);\n    //detect current page by url\n    const showPage = regex.test(url) ? true : false;\n    //title conditional based on current page and page loading state \n    let title;\n    if(!location && showPage) {\n        title = 'Loading...';\n    } else if (location && showPage) {\n        title = location.slice(0, 1).toUpperCase() + location.slice(1);\n    } else {\n        title = 'Traveler'\n    }\n\n    return (\n        <NavStyle>\n            {/* nav title changes to location on edit form and show page */}\n            <h2>{title}</h2>\n            <DropdownContainer onClick={() => toggleDropdown(!dropdown)}>\n                {/* hamburder dropdown; thanks Madeline! */}\n                <span> </span>\n                <span> </span>\n                <span> </span>\n            </DropdownContainer>\n            {dropdown && <Dropdown/>}\n        </NavStyle>\n    )\n}\n\nNav = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Nav)\n\nexport default Nav\n\n  "]},"metadata":{},"sourceType":"module"}