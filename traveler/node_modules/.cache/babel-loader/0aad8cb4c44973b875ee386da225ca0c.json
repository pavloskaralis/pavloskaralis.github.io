{"ast":null,"code":"import _regeneratorRuntime from\"/Users/pavloskaralis/Desktop/pavloskaralis.github.io/traveler/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/pavloskaralis/Desktop/pavloskaralis.github.io/traveler/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';import history from'../history.js';import selectItinerary from'./selectItinerary.js';export default function getItinerary(userID){return function(dispatch){var splitUrl=window.location.href.split('/');var userIDParam=splitUrl[splitUrl.length-2];var itineraryID=splitUrl[splitUrl.length-1];var getRequest=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var result,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(\"https://traveler-backend.herokuapp.com/users/\".concat(userIDParam,\"/itineraries/\").concat(itineraryID));case 2:result=_context.sent;data=result.data;if(!data.error){//makes url prettier \n// history.push(`/${data.location}`, null);\ndispatch(selectItinerary(data));}else{history.push('/');}case 5:case\"end\":return _context.stop();}}},_callee);}));return function getRequest(){return _ref.apply(this,arguments);};}();//prevent a user from accessing another user's itinerary\nuserID===parseFloat(userIDParam)?getRequest():history.push('/');};}","map":{"version":3,"sources":["/Users/pavloskaralis/Desktop/pavloskaralis.github.io/traveler/src/actions/getItinerary.js"],"names":["axios","history","selectItinerary","getItinerary","userID","dispatch","splitUrl","window","location","href","split","userIDParam","length","itineraryID","getRequest","get","result","data","error","push","parseFloat"],"mappings":"qWAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,eAAP,KAA4B,sBAA5B,CAEA,cAAe,SAASC,CAAAA,YAAT,CAAsBC,MAAtB,CAA8B,CACzC,MAAO,UAAAC,QAAQ,CAAI,CACf,GAAMC,CAAAA,QAAQ,CAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,CAAjB,CACA,GAAMC,CAAAA,WAAW,CAAGL,QAAQ,CAACA,QAAQ,CAACM,MAAT,CAAkB,CAAnB,CAA5B,CACA,GAAMC,CAAAA,WAAW,CAAGP,QAAQ,CAACA,QAAQ,CAACM,MAAT,CAAkB,CAAnB,CAA5B,CAEA,GAAME,CAAAA,UAAU,0FAAG,yKACMd,CAAAA,KAAK,CAACe,GAAN,wDAA0DJ,WAA1D,yBAAqFE,WAArF,EADN,QACTG,MADS,eAERC,IAFQ,CAEAD,MAFA,CAERC,IAFQ,CAGf,GAAG,CAACA,IAAI,CAACC,KAAT,CAAe,CACX;AACA;AACDb,QAAQ,CAACH,eAAe,CAACe,IAAD,CAAhB,CAAR,CACF,CAJD,IAIO,CACHhB,OAAO,CAACkB,IAAR,CAAa,GAAb,EACH,CATc,sDAAH,kBAAVL,CAAAA,UAAU,0CAAhB,CAWA;AACAV,MAAM,GAAKgB,UAAU,CAACT,WAAD,CAArB,CAAqCG,UAAU,EAA/C,CAAoDb,OAAO,CAACkB,IAAR,CAAa,GAAb,CAApD,CACH,CAlBD,CAmBH","sourcesContent":["import axios from 'axios'\nimport history from '../history.js'\nimport selectItinerary from './selectItinerary.js'\n\nexport default function getItinerary(userID) {\n    return dispatch => {\n        const splitUrl = window.location.href.split('/');\n        const userIDParam = splitUrl[splitUrl.length - 2];\n        const itineraryID = splitUrl[splitUrl.length - 1];\n\n        const getRequest = async() => {\n            const result = await axios.get(`https://traveler-backend.herokuapp.com/users/${userIDParam}/itineraries/${itineraryID}`) \n            const {data} = result;  \n            if(!data.error){\n                //makes url prettier \n                // history.push(`/${data.location}`, null);\n               dispatch(selectItinerary(data));\n            } else {               \n                history.push('/');\n            }  \n        }\n        //prevent a user from accessing another user's itinerary\n        userID === parseFloat(userIDParam) ? getRequest() : history.push('/'); \n    }\n}"]},"metadata":{},"sourceType":"module"}