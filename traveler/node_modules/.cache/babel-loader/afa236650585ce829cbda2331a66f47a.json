{"ast":null,"code":"import _objectSpread from \"/Users/pavloskaralis/Desktop/traveler_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport axios from 'axios';\nimport toggleError from './toggleError.js';\nimport toggleForm from './toggleForm.js';\nimport swapItinerary from './swapItinerary.js';\nimport selectItinerary from './selectItinerary.js';\nexport default function putItinerary(location, departureDate, returnDate, itineraryID, index, shared, defaultDeparture) {\n  console.log('default departure', defaultDeparture);\n  return dispatch => {\n    //check date format is valid\n    const regex = /(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;\n\n    if (!departureDate.match(regex) || !returnDate.match(regex)) {\n      return dispatch(toggleError('Invalid Date Format'));\n    } //original departure date\n\n\n    const splitDefaultDeparture = defaultDeparture.split('-');\n    const parsedDefaultDeparture = splitDefaultDeparture.map(num => parseFloat(num));\n    console.log('split default', splitDefaultDeparture);\n    console.log('parsedDefault', parsedDefaultDeparture); //breakdown depart and return dates \n\n    const splitDepartureDate = departureDate.split('-');\n    const splitReturnDate = returnDate.split('-');\n    const parsedDepartureDate = splitDepartureDate.map(num => parseFloat(num));\n    const parsedReturnDate = splitReturnDate.map(num => parseFloat(num)); //check departure date occurs before return date, and on or after current date \n    // [0] = YY; [1] = MM; [2] = DD;\n\n    if (parsedDepartureDate[0] > parsedReturnDate[0] || parsedDepartureDate[0] < parsedDefaultDeparture[0]) {\n      // console.log(1)\n      return dispatch(toggleError('Invalid Dates')); //checks months\n    } else if (parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] > parsedReturnDate[1] || parsedDepartureDate[0] === parsedDefaultDeparture[0] && parsedDepartureDate[1] < parsedDefaultDeparture[1]) {\n      // console.log(2)\n      return dispatch(toggleError('Invalid Dates')); //checks days\n    } else if (parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] === parsedReturnDate[1] && parsedDepartureDate[2] > parsedReturnDate[2] || parsedDepartureDate[0] === parsedDefaultDeparture[0] && parsedDepartureDate[1] === parsedDefaultDeparture[1] && parsedDepartureDate[2] < parsedDefaultDeparture[2]) {\n      // console.log(3)\n      return dispatch(toggleError('Invalid Dates'));\n    } //make sure range won't break site; \n    // [0] = YY; [1] = YY; [2] = DD;\n\n\n    if (parsedDepartureDate[0] < parsedReturnDate[0] && parsedDepartureDate[0] + 1 < parsedReturnDate[0]) {\n      return dispatch(toggleError('60 Day Limit'));\n    } else if (parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] + 4 < parsedReturnDate[1]) {\n      return dispatch(toggleError('60 Day Limit'));\n    } //create array of dates\n\n\n    const dates = [];\n    const endDate = new Date(returnDate);\n    let nextDate = new Date(departureDate);\n\n    while (nextDate <= endDate) {\n      const dd = nextDate.getDate() + 1;\n      const mm = nextDate.getMonth() + 1;\n      const yyyy = nextDate.getFullYear();\n      let day = [mm, dd, yyyy];\n      if (day[0] < 10) day[0] = '0' + day[0];\n      if (day[1] < 10) day[1] = '0' + day[1];\n      day[2] = day[2].toString().split('').slice(2).join('');\n      dates.push(day[0] + '.' + day[1] + '.' + day[2]);\n      nextDate.setDate(nextDate.getDate() + 1);\n    } //error in Date class does not skip 2/30\n\n\n    if (dates.find(date => date.slice(0, 5) === '02.30')) {\n      let errorIndex = dates.indexOf(dates.find(date => date.slice(0, 5) === '02.30'));\n      dates[errorIndex] = '03.01' + dates[errorIndex].slice(5);\n    } //easier 60 day limit check\n\n\n    if (dates.length > 60) return dispatch(toggleError('60 Day Limit')); //post request\n\n    const updatedItinerary = {\n      location: location,\n      dates: JSON.stringify(dates)\n    };\n\n    const postRequest = async () => {\n      const result = await axios.put(`https://traveler-backend.herokuapp.com/itineraries/${itineraryID}`, updatedItinerary);\n      const data = result.data;\n\n      if (!data.error) {\n        dispatch(toggleError(''));\n        dispatch(toggleForm(''));\n        dispatch(selectItinerary(''));\n        const newDates = JSON.parse(updatedItinerary.dates);\n        console.log(data.shared);\n        dispatch(swapItinerary(_objectSpread({}, updatedItinerary, {\n          dates: newDates,\n          id: itineraryID,\n          shared: shared\n        }), index));\n      } else {\n        dispatch(toggleError('Failed To Update'));\n      }\n    };\n\n    postRequest();\n  };\n}","map":{"version":3,"sources":["/Users/pavloskaralis/Desktop/traveler_frontend/src/actions/putItinerary.js"],"names":["axios","toggleError","toggleForm","swapItinerary","selectItinerary","putItinerary","location","departureDate","returnDate","itineraryID","index","shared","defaultDeparture","console","log","dispatch","regex","match","splitDefaultDeparture","split","parsedDefaultDeparture","map","num","parseFloat","splitDepartureDate","splitReturnDate","parsedDepartureDate","parsedReturnDate","dates","endDate","Date","nextDate","dd","getDate","mm","getMonth","yyyy","getFullYear","day","toString","slice","join","push","setDate","find","date","errorIndex","indexOf","length","updatedItinerary","JSON","stringify","postRequest","result","put","data","error","newDates","parse","id"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport toggleError from './toggleError.js'\nimport toggleForm from './toggleForm.js'\nimport swapItinerary from './swapItinerary.js'\nimport selectItinerary from './selectItinerary.js';\n\nexport default function putItinerary(location,departureDate,returnDate, itineraryID, index, shared, defaultDeparture) {\n    console.log('default departure', defaultDeparture)\n    return dispatch => {\n        //check date format is valid\n        const regex = /(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;\n        if(!departureDate.match(regex) || !returnDate.match(regex)){\n            return dispatch(toggleError('Invalid Date Format'));\n        } \n        //original departure date\n        const splitDefaultDeparture = defaultDeparture.split('-');\n        const parsedDefaultDeparture = splitDefaultDeparture.map(num => parseFloat(num));\n        console.log('split default', splitDefaultDeparture)\n        console.log('parsedDefault', parsedDefaultDeparture)\n        //breakdown depart and return dates \n        const splitDepartureDate = departureDate.split('-');\n        const splitReturnDate = returnDate.split('-');\n        const parsedDepartureDate = splitDepartureDate.map(num => parseFloat(num));\n        const parsedReturnDate = splitReturnDate.map(num => parseFloat(num));\n        //check departure date occurs before return date, and on or after current date \n        // [0] = YY; [1] = MM; [2] = DD;\n        if(parsedDepartureDate[0] > parsedReturnDate[0] || parsedDepartureDate[0] < parsedDefaultDeparture[0]) { \n            // console.log(1)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks months\n        } else if((parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] > parsedReturnDate[1]) || (parsedDepartureDate[0] === parsedDefaultDeparture[0] && parsedDepartureDate[1] < parsedDefaultDeparture[1])) {\n            // console.log(2)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks days\n        } else if ((parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] === parsedReturnDate[1] && parsedDepartureDate[2] > parsedReturnDate[2]) || (parsedDepartureDate[0] === parsedDefaultDeparture[0] && parsedDepartureDate[1] === parsedDefaultDeparture[1] && parsedDepartureDate[2] < parsedDefaultDeparture[2])) {\n            // console.log(3)\n            return dispatch(toggleError('Invalid Dates'));\n        }\n        //make sure range won't break site; \n        // [0] = YY; [1] = YY; [2] = DD;\n        if((parsedDepartureDate[0] < parsedReturnDate[0]) && ((parsedDepartureDate[0] + 1) < parsedReturnDate[0])) {\n            return dispatch(toggleError('60 Day Limit'));\n        } else if ((parsedDepartureDate[0] === parsedReturnDate[0]) && ((parsedDepartureDate[1] + 4) < parsedReturnDate[1])) {\n            return dispatch(toggleError('60 Day Limit'));\n        }\n        //create array of dates\n        const dates = [];\n        const endDate = new Date(returnDate); \n        let nextDate = new Date(departureDate);\n        while (nextDate <= endDate) {\n            const dd = nextDate.getDate() + 1;\n            const mm = nextDate.getMonth() + 1;\n            const yyyy = nextDate.getFullYear();\n            let day = [mm, dd, yyyy];\n            if(day[0] < 10) day[0] = '0'+ day[0];\n            if(day[1] < 10) day[1] = '0'+ day[1];\n            day[2] = day[2].toString().split('').slice(2).join('');\n            dates.push(day[0] + '.' + day[1] + '.' + day[2]);\n            nextDate.setDate(nextDate.getDate() + 1);\n        }\n        //error in Date class does not skip 2/30\n        if(dates.find(date => date.slice(0,5) === ('02.30'))) {\n            let errorIndex = dates.indexOf(dates.find(date => date.slice(0,5) === ('02.30')));\n            dates[errorIndex] = '03.01' + dates[errorIndex].slice(5);\n        }\n        //easier 60 day limit check\n        if(dates.length > 60) return dispatch(toggleError('60 Day Limit'));\n        //post request\n        const updatedItinerary = {\n            location: location,\n            dates:  JSON.stringify(dates)\n        }\n        const postRequest = async () => {\n            const result = await axios.put(`https://traveler-backend.herokuapp.com/itineraries/${itineraryID}`, updatedItinerary);\n            const {data} = result;\n            if (!data.error) {\n                dispatch(toggleError(''));\n                dispatch(toggleForm(''));\n                dispatch(selectItinerary(''));\n                const newDates = JSON.parse(updatedItinerary.dates)\n                console.log(data.shared)\n                dispatch(swapItinerary({...updatedItinerary, dates: newDates, id: itineraryID, shared: shared}, index))\n            } else {\n                dispatch(toggleError('Failed To Update'));\n            }\n        }\n        postRequest();\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}