{"ast":null,"code":"import _objectSpread from \"/Users/pavloskaralis/Desktop/traveler_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport axios from 'axios';\nimport toggleError from './toggleError.js';\nimport toggleForm from './toggleForm.js';\nimport swapItinerary from './swapItinerary.js';\nimport selectItinerary from './selectItinerary.js';\nexport default function putItinerary(location, departureDate, returnDate, itineraryID, index, shared, defaultDeparture) {\n  console.log('default departure', defaultDeparture);\n  return dispatch => {\n    //check date format is valid\n    const regex = /(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;\n\n    if (!departureDate.match(regex) || !returnDate.match(regex)) {\n      return dispatch(toggleError('Invalid Date Format'));\n    } //find today's date\n\n\n    const date = new Date();\n    const dd = date.getDate();\n    const mm = date.getMonth() + 1;\n    const yyyy = date.getFullYear();\n    const today = [parseFloat(yyyy), parseFloat(mm), parseFloat(dd)]; //breakdown depart and return dates \n\n    const splitDepartureDate = departureDate.split('-');\n    const splitReturnDate = returnDate.split('-');\n    const parsedDepartureDate = splitDepartureDate.map(num => parseFloat(num));\n    const parsedReturnDate = splitReturnDate.map(num => parseFloat(num)); //check departure date occurs before return date, and on or after current date \n    // [0] = YY; [1] = MM; [2] = DD;\n\n    if (parsedDepartureDate[0] > parsedReturnDate[0] || parsedDepartureDate[0] < today[0]) {\n      console.log(1);\n      return dispatch(toggleError('Invalid Dates')); //checks months\n    } else if (parsedDepartureDate[1] > parsedReturnDate[1] || parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] < today[1]) {\n      console.log(2);\n      return dispatch(toggleError('Invalid Dates')); //checks days\n    } else if (parsedDepartureDate[2] > parsedReturnDate[2] || parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] === today[1] && parsedDepartureDate[2] < today[2]) {\n      console.log(3);\n      return dispatch(toggleError('Invalid Dates'));\n    } //make sure range won't break site; \n    // [0] = YY; [1] = YY; [2] = DD;\n\n\n    if (parsedDepartureDate[0] < parsedReturnDate[0] && parsedDepartureDate[0] + 1 < parsedReturnDate[0]) {\n      return dispatch(toggleError('60 Day Limit'));\n    } else if (parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] + 4 < parsedReturnDate[1]) {\n      return dispatch(toggleError('60 Day Limit'));\n    } //create array of dates\n\n\n    const dates = [];\n    const endDate = new Date(returnDate);\n    let nextDate = new Date(departureDate);\n\n    while (nextDate <= endDate) {\n      const dd = nextDate.getDate() + 1;\n      const mm = nextDate.getMonth() + 1;\n      const yyyy = nextDate.getFullYear();\n      let day = [mm, dd, yyyy];\n      if (day[0] < 10) day[0] = '0' + day[0];\n      if (day[1] < 10) day[1] = '0' + day[1];\n      day[2] = day[2].toString().split('').slice(2).join('');\n      dates.push(day[0] + '.' + day[1] + '.' + day[2]);\n      nextDate.setDate(nextDate.getDate() + 1);\n    } //error in Date class does not skip 2/30\n\n\n    if (dates.find(date => date.slice(0, 5) === '02.30')) {\n      let errorIndex = dates.indexOf(dates.find(date => date.slice(0, 5) === '02.30'));\n      dates[errorIndex] = '03.01' + dates[errorIndex].slice(5);\n    } //easier 60 day limit check\n\n\n    if (dates.length > 60) return dispatch(toggleError('60 Day Limit')); //post request\n\n    const updatedItinerary = {\n      location: location,\n      dates: JSON.stringify(dates)\n    };\n\n    const postRequest = async () => {\n      const result = await axios.put(`https://traveler-backend.herokuapp.com/itineraries/${itineraryID}`, updatedItinerary);\n      const data = result.data;\n\n      if (!data.error) {\n        dispatch(toggleError(''));\n        dispatch(toggleForm(''));\n        dispatch(selectItinerary(''));\n        const newDates = JSON.parse(updatedItinerary.dates);\n        console.log(data.shared);\n        dispatch(swapItinerary(_objectSpread({}, updatedItinerary, {\n          dates: newDates,\n          id: itineraryID,\n          shared: shared\n        }), index));\n      } else {\n        dispatch(toggleError('Failed To Update'));\n      }\n    };\n\n    postRequest();\n  };\n}","map":{"version":3,"sources":["/Users/pavloskaralis/Desktop/traveler_frontend/src/actions/putItinerary.js"],"names":["axios","toggleError","toggleForm","swapItinerary","selectItinerary","putItinerary","location","departureDate","returnDate","itineraryID","index","shared","defaultDeparture","console","log","dispatch","regex","match","date","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","today","parseFloat","splitDepartureDate","split","splitReturnDate","parsedDepartureDate","map","num","parsedReturnDate","dates","endDate","nextDate","day","toString","slice","join","push","setDate","find","errorIndex","indexOf","length","updatedItinerary","JSON","stringify","postRequest","result","put","data","error","newDates","parse","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AAEA,eAAe,SAASC,YAAT,CAAsBC,QAAtB,EAA+BC,aAA/B,EAA6CC,UAA7C,EAAyDC,WAAzD,EAAsEC,KAAtE,EAA6EC,MAA7E,EAAqFC,gBAArF,EAAuG;AAClHC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,gBAAjC;AACA,SAAOG,QAAQ,IAAI;AACf;AACA,UAAMC,KAAK,GAAG,oDAAd;;AACA,QAAG,CAACT,aAAa,CAACU,KAAd,CAAoBD,KAApB,CAAD,IAA+B,CAACR,UAAU,CAACS,KAAX,CAAiBD,KAAjB,CAAnC,EAA2D;AACvD,aAAOD,QAAQ,CAACd,WAAW,CAAC,qBAAD,CAAZ,CAAf;AACH,KALc,CAMf;;;AACA,UAAMiB,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,UAAMC,EAAE,GAAGF,IAAI,CAACG,OAAL,EAAX;AACA,UAAMC,EAAE,GAAGJ,IAAI,CAACK,QAAL,KAAkB,CAA7B;AACA,UAAMC,IAAI,GAAGN,IAAI,CAACO,WAAL,EAAb;AACA,UAAMC,KAAK,GAAG,CAACC,UAAU,CAACH,IAAD,CAAX,EAAmBG,UAAU,CAACL,EAAD,CAA7B,EAAmCK,UAAU,CAACP,EAAD,CAA7C,CAAd,CAXe,CAYf;;AACA,UAAMQ,kBAAkB,GAAGrB,aAAa,CAACsB,KAAd,CAAoB,GAApB,CAA3B;AACA,UAAMC,eAAe,GAAGtB,UAAU,CAACqB,KAAX,CAAiB,GAAjB,CAAxB;AACA,UAAME,mBAAmB,GAAGH,kBAAkB,CAACI,GAAnB,CAAuBC,GAAG,IAAIN,UAAU,CAACM,GAAD,CAAxC,CAA5B;AACA,UAAMC,gBAAgB,GAAGJ,eAAe,CAACE,GAAhB,CAAoBC,GAAG,IAAIN,UAAU,CAACM,GAAD,CAArC,CAAzB,CAhBe,CAiBf;AACA;;AACA,QAAGF,mBAAmB,CAAC,CAAD,CAAnB,GAAyBG,gBAAgB,CAAC,CAAD,CAAzC,IAAgDH,mBAAmB,CAAC,CAAD,CAAnB,GAAyBL,KAAK,CAAC,CAAD,CAAjF,EAAsF;AAClFb,MAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACA,aAAOC,QAAQ,CAACd,WAAW,CAAC,eAAD,CAAZ,CAAf,CAFkF,CAGtF;AACC,KAJD,MAIO,IAAG8B,mBAAmB,CAAC,CAAD,CAAnB,GAAyBG,gBAAgB,CAAC,CAAD,CAAzC,IAAiDH,mBAAmB,CAAC,CAAD,CAAnB,KAA2BL,KAAK,CAAC,CAAD,CAAhC,IAAuCK,mBAAmB,CAAC,CAAD,CAAnB,GAAyBL,KAAK,CAAC,CAAD,CAAzH,EAA+H;AAClIb,MAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACA,aAAOC,QAAQ,CAACd,WAAW,CAAC,eAAD,CAAZ,CAAf,CAFkI,CAGtI;AACC,KAJM,MAIA,IAAI8B,mBAAmB,CAAC,CAAD,CAAnB,GAAyBG,gBAAgB,CAAC,CAAD,CAAzC,IAAiDH,mBAAmB,CAAC,CAAD,CAAnB,KAA2BL,KAAK,CAAC,CAAD,CAAhC,IAAuCK,mBAAmB,CAAC,CAAD,CAAnB,KAA2BL,KAAK,CAAC,CAAD,CAAvE,IAA8EK,mBAAmB,CAAC,CAAD,CAAnB,GAAyBL,KAAK,CAAC,CAAD,CAAjK,EAAuK;AAC1Kb,MAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACA,aAAOC,QAAQ,CAACd,WAAW,CAAC,eAAD,CAAZ,CAAf;AACH,KA9Bc,CA+Bf;AACA;;;AACA,QAAI8B,mBAAmB,CAAC,CAAD,CAAnB,GAAyBG,gBAAgB,CAAC,CAAD,CAA1C,IAAoDH,mBAAmB,CAAC,CAAD,CAAnB,GAAyB,CAA1B,GAA+BG,gBAAgB,CAAC,CAAD,CAArG,EAA2G;AACvG,aAAOnB,QAAQ,CAACd,WAAW,CAAC,cAAD,CAAZ,CAAf;AACH,KAFD,MAEO,IAAK8B,mBAAmB,CAAC,CAAD,CAAnB,KAA2BG,gBAAgB,CAAC,CAAD,CAA5C,IAAsDH,mBAAmB,CAAC,CAAD,CAAnB,GAAyB,CAA1B,GAA+BG,gBAAgB,CAAC,CAAD,CAAxG,EAA8G;AACjH,aAAOnB,QAAQ,CAACd,WAAW,CAAC,cAAD,CAAZ,CAAf;AACH,KArCc,CAsCf;;;AACA,UAAMkC,KAAK,GAAG,EAAd;AACA,UAAMC,OAAO,GAAG,IAAIjB,IAAJ,CAASX,UAAT,CAAhB;AACA,QAAI6B,QAAQ,GAAG,IAAIlB,IAAJ,CAASZ,aAAT,CAAf;;AACA,WAAO8B,QAAQ,IAAID,OAAnB,EAA4B;AACxB,YAAMhB,EAAE,GAAGiB,QAAQ,CAAChB,OAAT,KAAqB,CAAhC;AACA,YAAMC,EAAE,GAAGe,QAAQ,CAACd,QAAT,KAAsB,CAAjC;AACA,YAAMC,IAAI,GAAGa,QAAQ,CAACZ,WAAT,EAAb;AACA,UAAIa,GAAG,GAAG,CAAChB,EAAD,EAAKF,EAAL,EAASI,IAAT,CAAV;AACA,UAAGc,GAAG,CAAC,CAAD,CAAH,GAAS,EAAZ,EAAgBA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAKA,GAAG,CAAC,CAAD,CAAjB;AAChB,UAAGA,GAAG,CAAC,CAAD,CAAH,GAAS,EAAZ,EAAgBA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAKA,GAAG,CAAC,CAAD,CAAjB;AAChBA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOC,QAAP,GAAkBV,KAAlB,CAAwB,EAAxB,EAA4BW,KAA5B,CAAkC,CAAlC,EAAqCC,IAArC,CAA0C,EAA1C,CAAT;AACAN,MAAAA,KAAK,CAACO,IAAN,CAAWJ,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT,GAAeA,GAAG,CAAC,CAAD,CAAlB,GAAwB,GAAxB,GAA8BA,GAAG,CAAC,CAAD,CAA5C;AACAD,MAAAA,QAAQ,CAACM,OAAT,CAAiBN,QAAQ,CAAChB,OAAT,KAAqB,CAAtC;AACH,KApDc,CAqDf;;;AACA,QAAGc,KAAK,CAACS,IAAN,CAAW1B,IAAI,IAAIA,IAAI,CAACsB,KAAL,CAAW,CAAX,EAAa,CAAb,MAAqB,OAAxC,CAAH,EAAsD;AAClD,UAAIK,UAAU,GAAGV,KAAK,CAACW,OAAN,CAAcX,KAAK,CAACS,IAAN,CAAW1B,IAAI,IAAIA,IAAI,CAACsB,KAAL,CAAW,CAAX,EAAa,CAAb,MAAqB,OAAxC,CAAd,CAAjB;AACAL,MAAAA,KAAK,CAACU,UAAD,CAAL,GAAoB,UAAUV,KAAK,CAACU,UAAD,CAAL,CAAkBL,KAAlB,CAAwB,CAAxB,CAA9B;AACH,KAzDc,CA0Df;;;AACA,QAAGL,KAAK,CAACY,MAAN,GAAe,EAAlB,EAAsB,OAAOhC,QAAQ,CAACd,WAAW,CAAC,cAAD,CAAZ,CAAf,CA3DP,CA4Df;;AACA,UAAM+C,gBAAgB,GAAG;AACrB1C,MAAAA,QAAQ,EAAEA,QADW;AAErB6B,MAAAA,KAAK,EAAGc,IAAI,CAACC,SAAL,CAAef,KAAf;AAFa,KAAzB;;AAIA,UAAMgB,WAAW,GAAG,YAAY;AAC5B,YAAMC,MAAM,GAAG,MAAMpD,KAAK,CAACqD,GAAN,CAAW,sDAAqD5C,WAAY,EAA5E,EAA+EuC,gBAA/E,CAArB;AAD4B,YAErBM,IAFqB,GAEbF,MAFa,CAErBE,IAFqB;;AAG5B,UAAI,CAACA,IAAI,CAACC,KAAV,EAAiB;AACbxC,QAAAA,QAAQ,CAACd,WAAW,CAAC,EAAD,CAAZ,CAAR;AACAc,QAAAA,QAAQ,CAACb,UAAU,CAAC,EAAD,CAAX,CAAR;AACAa,QAAAA,QAAQ,CAACX,eAAe,CAAC,EAAD,CAAhB,CAAR;AACA,cAAMoD,QAAQ,GAAGP,IAAI,CAACQ,KAAL,CAAWT,gBAAgB,CAACb,KAA5B,CAAjB;AACAtB,QAAAA,OAAO,CAACC,GAAR,CAAYwC,IAAI,CAAC3C,MAAjB;AACAI,QAAAA,QAAQ,CAACZ,aAAa,mBAAK6C,gBAAL;AAAuBb,UAAAA,KAAK,EAAEqB,QAA9B;AAAwCE,UAAAA,EAAE,EAAEjD,WAA5C;AAAyDE,UAAAA,MAAM,EAAEA;AAAjE,YAA0ED,KAA1E,CAAd,CAAR;AACH,OAPD,MAOO;AACHK,QAAAA,QAAQ,CAACd,WAAW,CAAC,kBAAD,CAAZ,CAAR;AACH;AACJ,KAbD;;AAcAkD,IAAAA,WAAW;AACd,GAhFD;AAiFH","sourcesContent":["import axios from 'axios'\nimport toggleError from './toggleError.js'\nimport toggleForm from './toggleForm.js'\nimport swapItinerary from './swapItinerary.js'\nimport selectItinerary from './selectItinerary.js';\n\nexport default function putItinerary(location,departureDate,returnDate, itineraryID, index, shared, defaultDeparture) {\n    console.log('default departure', defaultDeparture)\n    return dispatch => {\n        //check date format is valid\n        const regex = /(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;\n        if(!departureDate.match(regex) || !returnDate.match(regex)){\n            return dispatch(toggleError('Invalid Date Format'));\n        } \n        //find today's date\n        const date = new Date();\n        const dd = date.getDate();\n        const mm = date.getMonth() + 1;\n        const yyyy = date.getFullYear();\n        const today = [parseFloat(yyyy), parseFloat(mm), parseFloat(dd)]\n        //breakdown depart and return dates \n        const splitDepartureDate = departureDate.split('-');\n        const splitReturnDate = returnDate.split('-');\n        const parsedDepartureDate = splitDepartureDate.map(num => parseFloat(num));\n        const parsedReturnDate = splitReturnDate.map(num => parseFloat(num));\n        //check departure date occurs before return date, and on or after current date \n        // [0] = YY; [1] = MM; [2] = DD;\n        if(parsedDepartureDate[0] > parsedReturnDate[0] || parsedDepartureDate[0] < today[0]) { \n            console.log(1)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks months\n        } else if(parsedDepartureDate[1] > parsedReturnDate[1] || (parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] < today[1])) {\n            console.log(2)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks days\n        } else if (parsedDepartureDate[2] > parsedReturnDate[2] || (parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] === today[1] && parsedDepartureDate[2] < today[2])) {\n            console.log(3)\n            return dispatch(toggleError('Invalid Dates'));\n        }\n        //make sure range won't break site; \n        // [0] = YY; [1] = YY; [2] = DD;\n        if((parsedDepartureDate[0] < parsedReturnDate[0]) && ((parsedDepartureDate[0] + 1) < parsedReturnDate[0])) {\n            return dispatch(toggleError('60 Day Limit'));\n        } else if ((parsedDepartureDate[0] === parsedReturnDate[0]) && ((parsedDepartureDate[1] + 4) < parsedReturnDate[1])) {\n            return dispatch(toggleError('60 Day Limit'));\n        }\n        //create array of dates\n        const dates = [];\n        const endDate = new Date(returnDate); \n        let nextDate = new Date(departureDate);\n        while (nextDate <= endDate) {\n            const dd = nextDate.getDate() + 1;\n            const mm = nextDate.getMonth() + 1;\n            const yyyy = nextDate.getFullYear();\n            let day = [mm, dd, yyyy];\n            if(day[0] < 10) day[0] = '0'+ day[0];\n            if(day[1] < 10) day[1] = '0'+ day[1];\n            day[2] = day[2].toString().split('').slice(2).join('');\n            dates.push(day[0] + '.' + day[1] + '.' + day[2]);\n            nextDate.setDate(nextDate.getDate() + 1);\n        }\n        //error in Date class does not skip 2/30\n        if(dates.find(date => date.slice(0,5) === ('02.30'))) {\n            let errorIndex = dates.indexOf(dates.find(date => date.slice(0,5) === ('02.30')));\n            dates[errorIndex] = '03.01' + dates[errorIndex].slice(5);\n        }\n        //easier 60 day limit check\n        if(dates.length > 60) return dispatch(toggleError('60 Day Limit'));\n        //post request\n        const updatedItinerary = {\n            location: location,\n            dates:  JSON.stringify(dates)\n        }\n        const postRequest = async () => {\n            const result = await axios.put(`https://traveler-backend.herokuapp.com/itineraries/${itineraryID}`, updatedItinerary);\n            const {data} = result;\n            if (!data.error) {\n                dispatch(toggleError(''));\n                dispatch(toggleForm(''));\n                dispatch(selectItinerary(''));\n                const newDates = JSON.parse(updatedItinerary.dates)\n                console.log(data.shared)\n                dispatch(swapItinerary({...updatedItinerary, dates: newDates, id: itineraryID, shared: shared}, index))\n            } else {\n                dispatch(toggleError('Failed To Update'));\n            }\n        }\n        postRequest();\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}