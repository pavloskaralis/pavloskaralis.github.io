{"ast":null,"code":"import _objectSpread from \"/Users/pavloskaralis/Desktop/traveler_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport axios from 'axios';\nimport toggleError from './toggleError.js';\nimport toggleForm from './toggleForm.js';\nimport addItinerary from './addItinerary.js';\nexport default function postItinerary(location, departureDate, returnDate, userID) {\n  return dispatch => {\n    //check date format is valid\n    const regex = /(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;\n\n    if (!departureDate.match(regex) || !returnDate.match(regex)) {\n      console.log('invalde date format');\n      return dispatch(toggleError('Invalid Date Format'));\n    } //find today's date\n\n\n    const date = new Date();\n    const dd = date.getDate();\n    const mm = date.getMonth() + 1;\n    const yyyy = date.getFullYear();\n    const today = [parseFloat(yyyy), parseFloat(mm), parseFloat(dd)]; //breakdown depart and return dates \n\n    const splitDepartureDate = departureDate.split('-');\n    const splitReturnDate = returnDate.split('-');\n    const parsedDepartureDate = splitDepartureDate.map(num => parseFloat(num));\n    const parsedReturnDate = splitReturnDate.map(num => parseFloat(num)); //check departure date occurs before return date and after today,\n    // [0] = YY; [1] = MM; [2] = DD;\n    //checks years\n\n    if (parsedDepartureDate[0] > parsedReturnDate[0] || parsedDepartureDate[0] < today[0]) {\n      // console.log(1)\n      return dispatch(toggleError('Invalid Dates')); //checks months\n    } else if (parsedDepartureDate[1] > parsedReturnDate[1] || parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] < today[1]) {\n      // console.log(2)\n      return dispatch(toggleError('Invalid Dates')); //checks days\n    } else if (parsedDepartureDate[2] > parsedReturnDate[2] || parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] === today[1] && parsedDepartureDate[2] < today[2]) {\n      // console.log(3)\n      return dispatch(toggleError('Invalid Dates'));\n    } //make sure range won't break site; \n    // [0] = YY; [1] = YY; [2] = DD;\n\n\n    if (parsedDepartureDate[0] < parsedReturnDate[0] && parsedDepartureDate[0] + 1 < parsedReturnDate[0]) {\n      return dispatch(toggleError('60 Day Limit'));\n    } else if (parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] + 4 < parsedReturnDate[1]) {\n      return dispatch(toggleError('60 Day Limit'));\n    } //create array of dates\n\n\n    const dates = [];\n    const endDate = new Date(returnDate);\n    let nextDate = new Date(departureDate);\n\n    while (nextDate <= endDate) {\n      const dd = nextDate.getDate() + 1;\n      const mm = nextDate.getMonth() + 1;\n      const yyyy = nextDate.getFullYear();\n      let day = [mm, dd, yyyy];\n      if (day[0] < 10) day[0] = '0' + day[0];\n      if (day[1] < 10) day[1] = '0' + day[1];\n      day[2] = day[2].toString().split('').slice(2).join('');\n      dates.push(day[0] + '.' + day[1] + '.' + day[2]);\n      nextDate.setDate(nextDate.getDate() + 1);\n    } //error in Date class does not skip 2/30\n\n\n    if (dates.find(date => date.slice(0, 5) === '02.30')) {\n      let errorIndex = dates.indexOf(dates.find(date => date.slice(0, 5) === '02.30'));\n      dates[errorIndex] = '03.01' + dates[errorIndex].slice(5);\n    } //easier 60 day limit check\n\n\n    if (dates.length > 60) return dispatch(toggleError('60 Day Limit')); //post request\n\n    const newItinerary = {\n      location: location,\n      dates: JSON.stringify(dates),\n      shared: false\n    };\n\n    const postRequest = async () => {\n      dispatch(toggleError('Saving Itinerary...'));\n      const result = await axios.post(`https://traveler-backend.herokuapp.com/users/${userID}/itineraries`, newItinerary);\n      const data = result.data;\n\n      if (!data.error) {\n        dispatch(toggleError(''));\n        dispatch(toggleForm(''));\n        const newDates = JSON.parse(newItinerary.dates);\n        dispatch(addItinerary(_objectSpread({}, newItinerary, {\n          dates: newDates,\n          id: data.id\n        })));\n      } else {\n        dispatch(toggleError('Failed To Save'));\n      }\n    };\n\n    postRequest();\n  };\n}","map":{"version":3,"sources":["/Users/pavloskaralis/Desktop/traveler_frontend/src/actions/postItinerary.js"],"names":["axios","toggleError","toggleForm","addItinerary","postItinerary","location","departureDate","returnDate","userID","dispatch","regex","match","console","log","date","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","today","parseFloat","splitDepartureDate","split","splitReturnDate","parsedDepartureDate","map","num","parsedReturnDate","dates","endDate","nextDate","day","toString","slice","join","push","setDate","find","errorIndex","indexOf","length","newItinerary","JSON","stringify","shared","postRequest","result","post","data","error","newDates","parse","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAEA,eAAe,SAASC,aAAT,CAAuBC,QAAvB,EAAgCC,aAAhC,EAA8CC,UAA9C,EAAyDC,MAAzD,EAAiE;AAC5E,SAAOC,QAAQ,IAAI;AACf;AACA,UAAMC,KAAK,GAAG,oDAAd;;AACA,QAAG,CAACJ,aAAa,CAACK,KAAd,CAAoBD,KAApB,CAAD,IAA+B,CAACH,UAAU,CAACI,KAAX,CAAiBD,KAAjB,CAAnC,EAA2D;AACvDE,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,aAAOJ,QAAQ,CAACR,WAAW,CAAC,qBAAD,CAAZ,CAAf;AACH,KANc,CAOf;;;AACA,UAAMa,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,UAAMC,EAAE,GAAGF,IAAI,CAACG,OAAL,EAAX;AACA,UAAMC,EAAE,GAAGJ,IAAI,CAACK,QAAL,KAAkB,CAA7B;AACA,UAAMC,IAAI,GAAGN,IAAI,CAACO,WAAL,EAAb;AACA,UAAMC,KAAK,GAAG,CAACC,UAAU,CAACH,IAAD,CAAX,EAAmBG,UAAU,CAACL,EAAD,CAA7B,EAAmCK,UAAU,CAACP,EAAD,CAA7C,CAAd,CAZe,CAaf;;AACA,UAAMQ,kBAAkB,GAAGlB,aAAa,CAACmB,KAAd,CAAoB,GAApB,CAA3B;AACA,UAAMC,eAAe,GAAGnB,UAAU,CAACkB,KAAX,CAAiB,GAAjB,CAAxB;AACA,UAAME,mBAAmB,GAAGH,kBAAkB,CAACI,GAAnB,CAAuBC,GAAG,IAAIN,UAAU,CAACM,GAAD,CAAxC,CAA5B;AACA,UAAMC,gBAAgB,GAAGJ,eAAe,CAACE,GAAhB,CAAoBC,GAAG,IAAIN,UAAU,CAACM,GAAD,CAArC,CAAzB,CAjBe,CAkBf;AACA;AACA;;AACA,QAAGF,mBAAmB,CAAC,CAAD,CAAnB,GAAyBG,gBAAgB,CAAC,CAAD,CAAzC,IAAgDH,mBAAmB,CAAC,CAAD,CAAnB,GAAyBL,KAAK,CAAC,CAAD,CAAjF,EAAsF;AAClF;AACA,aAAOb,QAAQ,CAACR,WAAW,CAAC,eAAD,CAAZ,CAAf,CAFkF,CAGtF;AACC,KAJD,MAIO,IAAG0B,mBAAmB,CAAC,CAAD,CAAnB,GAAyBG,gBAAgB,CAAC,CAAD,CAAzC,IAAiDH,mBAAmB,CAAC,CAAD,CAAnB,KAA2BL,KAAK,CAAC,CAAD,CAAhC,IAAuCK,mBAAmB,CAAC,CAAD,CAAnB,GAAyBL,KAAK,CAAC,CAAD,CAAzH,EAA+H;AAClI;AACA,aAAOb,QAAQ,CAACR,WAAW,CAAC,eAAD,CAAZ,CAAf,CAFkI,CAGtI;AACC,KAJM,MAIA,IAAI0B,mBAAmB,CAAC,CAAD,CAAnB,GAAyBG,gBAAgB,CAAC,CAAD,CAAzC,IAAiDH,mBAAmB,CAAC,CAAD,CAAnB,KAA2BL,KAAK,CAAC,CAAD,CAAhC,IAAuCK,mBAAmB,CAAC,CAAD,CAAnB,KAA2BL,KAAK,CAAC,CAAD,CAAvE,IAA8EK,mBAAmB,CAAC,CAAD,CAAnB,GAAyBL,KAAK,CAAC,CAAD,CAAjK,EAAuK;AAC1K;AACA,aAAOb,QAAQ,CAACR,WAAW,CAAC,eAAD,CAAZ,CAAf;AACH,KAhCc,CAiCf;AACA;;;AACA,QAAI0B,mBAAmB,CAAC,CAAD,CAAnB,GAAyBG,gBAAgB,CAAC,CAAD,CAA1C,IAAoDH,mBAAmB,CAAC,CAAD,CAAnB,GAAyB,CAA1B,GAA+BG,gBAAgB,CAAC,CAAD,CAArG,EAA2G;AACvG,aAAOrB,QAAQ,CAACR,WAAW,CAAC,cAAD,CAAZ,CAAf;AACH,KAFD,MAEO,IAAK0B,mBAAmB,CAAC,CAAD,CAAnB,KAA2BG,gBAAgB,CAAC,CAAD,CAA5C,IAAsDH,mBAAmB,CAAC,CAAD,CAAnB,GAAyB,CAA1B,GAA+BG,gBAAgB,CAAC,CAAD,CAAxG,EAA8G;AACjH,aAAOrB,QAAQ,CAACR,WAAW,CAAC,cAAD,CAAZ,CAAf;AACH,KAvCc,CAwCf;;;AACA,UAAM8B,KAAK,GAAG,EAAd;AACA,UAAMC,OAAO,GAAG,IAAIjB,IAAJ,CAASR,UAAT,CAAhB;AACA,QAAI0B,QAAQ,GAAG,IAAIlB,IAAJ,CAAST,aAAT,CAAf;;AACA,WAAO2B,QAAQ,IAAID,OAAnB,EAA4B;AACxB,YAAMhB,EAAE,GAAGiB,QAAQ,CAAChB,OAAT,KAAqB,CAAhC;AACA,YAAMC,EAAE,GAAGe,QAAQ,CAACd,QAAT,KAAsB,CAAjC;AACA,YAAMC,IAAI,GAAGa,QAAQ,CAACZ,WAAT,EAAb;AACA,UAAIa,GAAG,GAAG,CAAChB,EAAD,EAAKF,EAAL,EAASI,IAAT,CAAV;AACA,UAAGc,GAAG,CAAC,CAAD,CAAH,GAAS,EAAZ,EAAgBA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAKA,GAAG,CAAC,CAAD,CAAjB;AAChB,UAAGA,GAAG,CAAC,CAAD,CAAH,GAAS,EAAZ,EAAgBA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAKA,GAAG,CAAC,CAAD,CAAjB;AAChBA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOC,QAAP,GAAkBV,KAAlB,CAAwB,EAAxB,EAA4BW,KAA5B,CAAkC,CAAlC,EAAqCC,IAArC,CAA0C,EAA1C,CAAT;AACAN,MAAAA,KAAK,CAACO,IAAN,CAAWJ,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT,GAAeA,GAAG,CAAC,CAAD,CAAlB,GAAwB,GAAxB,GAA8BA,GAAG,CAAC,CAAD,CAA5C;AACAD,MAAAA,QAAQ,CAACM,OAAT,CAAiBN,QAAQ,CAAChB,OAAT,KAAqB,CAAtC;AACH,KAtDc,CAuDf;;;AACA,QAAGc,KAAK,CAACS,IAAN,CAAW1B,IAAI,IAAIA,IAAI,CAACsB,KAAL,CAAW,CAAX,EAAa,CAAb,MAAqB,OAAxC,CAAH,EAAsD;AAClD,UAAIK,UAAU,GAAGV,KAAK,CAACW,OAAN,CAAcX,KAAK,CAACS,IAAN,CAAW1B,IAAI,IAAIA,IAAI,CAACsB,KAAL,CAAW,CAAX,EAAa,CAAb,MAAqB,OAAxC,CAAd,CAAjB;AACAL,MAAAA,KAAK,CAACU,UAAD,CAAL,GAAoB,UAAUV,KAAK,CAACU,UAAD,CAAL,CAAkBL,KAAlB,CAAwB,CAAxB,CAA9B;AACH,KA3Dc,CA4Df;;;AACA,QAAGL,KAAK,CAACY,MAAN,GAAe,EAAlB,EAAsB,OAAOlC,QAAQ,CAACR,WAAW,CAAC,cAAD,CAAZ,CAAf,CA7DP,CA8Df;;AACA,UAAM2C,YAAY,GAAG;AACjBvC,MAAAA,QAAQ,EAAEA,QADO;AAEjB0B,MAAAA,KAAK,EAAGc,IAAI,CAACC,SAAL,CAAef,KAAf,CAFS;AAGjBgB,MAAAA,MAAM,EAAE;AAHS,KAArB;;AAKA,UAAMC,WAAW,GAAG,YAAY;AAC5BvC,MAAAA,QAAQ,CAACR,WAAW,CAAC,qBAAD,CAAZ,CAAR;AACA,YAAMgD,MAAM,GAAG,MAAMjD,KAAK,CAACkD,IAAN,CAAY,gDAA+C1C,MAAO,cAAlE,EAAiFoC,YAAjF,CAArB;AAF4B,YAGrBO,IAHqB,GAGbF,MAHa,CAGrBE,IAHqB;;AAI5B,UAAI,CAACA,IAAI,CAACC,KAAV,EAAiB;AACb3C,QAAAA,QAAQ,CAACR,WAAW,CAAC,EAAD,CAAZ,CAAR;AACAQ,QAAAA,QAAQ,CAACP,UAAU,CAAC,EAAD,CAAX,CAAR;AACA,cAAMmD,QAAQ,GAAGR,IAAI,CAACS,KAAL,CAAWV,YAAY,CAACb,KAAxB,CAAjB;AACAtB,QAAAA,QAAQ,CAACN,YAAY,mBAAKyC,YAAL;AAAmBb,UAAAA,KAAK,EAAEsB,QAA1B;AAAoCE,UAAAA,EAAE,EAAEJ,IAAI,CAACI;AAA7C,WAAb,CAAR;AACH,OALD,MAKO;AACH9C,QAAAA,QAAQ,CAACR,WAAW,CAAC,gBAAD,CAAZ,CAAR;AACH;AACJ,KAZD;;AAaA+C,IAAAA,WAAW;AACd,GAlFD;AAmFH","sourcesContent":["import axios from 'axios'\nimport toggleError from './toggleError.js'\nimport toggleForm from './toggleForm.js'\nimport addItinerary from './addItinerary.js';\n\nexport default function postItinerary(location,departureDate,returnDate,userID) {\n    return dispatch => {\n        //check date format is valid\n        const regex = /(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;\n        if(!departureDate.match(regex) || !returnDate.match(regex)){\n            console.log('invalde date format')\n            return dispatch(toggleError('Invalid Date Format'));\n        } \n        //find today's date\n        const date = new Date();\n        const dd = date.getDate();\n        const mm = date.getMonth() + 1;\n        const yyyy = date.getFullYear();\n        const today = [parseFloat(yyyy), parseFloat(mm), parseFloat(dd)]\n        //breakdown depart and return dates \n        const splitDepartureDate = departureDate.split('-');\n        const splitReturnDate = returnDate.split('-');\n        const parsedDepartureDate = splitDepartureDate.map(num => parseFloat(num));\n        const parsedReturnDate = splitReturnDate.map(num => parseFloat(num));\n        //check departure date occurs before return date and after today,\n        // [0] = YY; [1] = MM; [2] = DD;\n        //checks years\n        if(parsedDepartureDate[0] > parsedReturnDate[0] || parsedDepartureDate[0] < today[0]) { \n            // console.log(1)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks months\n        } else if(parsedDepartureDate[1] > parsedReturnDate[1] || (parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] < today[1])) {\n            // console.log(2)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks days\n        } else if (parsedDepartureDate[2] > parsedReturnDate[2] || (parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] === today[1] && parsedDepartureDate[2] < today[2])) {\n            // console.log(3)\n            return dispatch(toggleError('Invalid Dates'));\n        }\n        //make sure range won't break site; \n        // [0] = YY; [1] = YY; [2] = DD;\n        if((parsedDepartureDate[0] < parsedReturnDate[0]) && ((parsedDepartureDate[0] + 1) < parsedReturnDate[0])) {\n            return dispatch(toggleError('60 Day Limit'));\n        } else if ((parsedDepartureDate[0] === parsedReturnDate[0]) && ((parsedDepartureDate[1] + 4) < parsedReturnDate[1])) {\n            return dispatch(toggleError('60 Day Limit'));\n        }\n        //create array of dates\n        const dates = [];\n        const endDate = new Date(returnDate); \n        let nextDate = new Date(departureDate);\n        while (nextDate <= endDate) {\n            const dd = nextDate.getDate() + 1;\n            const mm = nextDate.getMonth() + 1;\n            const yyyy = nextDate.getFullYear();\n            let day = [mm, dd, yyyy];\n            if(day[0] < 10) day[0] = '0'+ day[0];\n            if(day[1] < 10) day[1] = '0'+ day[1];\n            day[2] = day[2].toString().split('').slice(2).join('');\n            dates.push(day[0] + '.' + day[1] + '.' + day[2]);\n            nextDate.setDate(nextDate.getDate() + 1);\n        }\n        //error in Date class does not skip 2/30\n        if(dates.find(date => date.slice(0,5) === ('02.30'))) {\n            let errorIndex = dates.indexOf(dates.find(date => date.slice(0,5) === ('02.30')));\n            dates[errorIndex] = '03.01' + dates[errorIndex].slice(5);\n        }\n        //easier 60 day limit check\n        if(dates.length > 60) return dispatch(toggleError('60 Day Limit'));\n        //post request\n        const newItinerary = {\n            location: location,\n            dates:  JSON.stringify(dates),\n            shared: false\n        }\n        const postRequest = async () => {\n            dispatch(toggleError('Saving Itinerary...'));\n            const result = await axios.post(`https://traveler-backend.herokuapp.com/users/${userID}/itineraries`, newItinerary);\n            const {data} = result;\n            if (!data.error) {\n                dispatch(toggleError(''));\n                dispatch(toggleForm(''));\n                const newDates = JSON.parse(newItinerary.dates)\n                dispatch(addItinerary({...newItinerary, dates: newDates, id: data.id}))\n            } else {\n                dispatch(toggleError('Failed To Save'));\n            }\n        }\n        postRequest();\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}