{"ast":null,"code":"import _regeneratorRuntime from\"/Users/pavloskaralis/Desktop/pavloskaralis.github.io/traveler/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/pavloskaralis/Desktop/pavloskaralis.github.io/traveler/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';import setUserID from'./setUserID.js';import setItineraries from'./setItineraries.js';import toggleError from'./toggleError.js';import toggleLogin from'./toggleLogin.js';import toggleDropdown from'./toggleDropdown.js';import toggleForm from'./toggleForm.js';export default function logIn(username,password){return function(dispatch){var user={username:username,password:password};var postRequest=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var result,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.post('https://traveler-backend.herokuapp.com/login',user);case 2:result=_context.sent;data=result.data;if(!data.error){localStorage.setItem(\"token\",data.jwt);dispatch(toggleLogin(true));dispatch(setUserID(data.id));dispatch(setItineraries(data.itineraries));dispatch(toggleError(''));dispatch(toggleDropdown(false));dispatch(toggleForm(''));}else{dispatch(toggleError('Invalid Username/Password'));}case 5:case\"end\":return _context.stop();}}},_callee);}));return function postRequest(){return _ref.apply(this,arguments);};}();postRequest();};}","map":{"version":3,"sources":["/Users/pavloskaralis/Desktop/pavloskaralis.github.io/traveler/src/actions/logIn.js"],"names":["axios","setUserID","setItineraries","toggleError","toggleLogin","toggleDropdown","toggleForm","logIn","username","password","dispatch","user","postRequest","post","result","data","error","localStorage","setItem","jwt","id","itineraries"],"mappings":"qWAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,gBAAtB,CACA,MAAOC,CAAAA,cAAP,KAA2B,qBAA3B,CACA,MAAOC,CAAAA,WAAP,KAAwB,kBAAxB,CACA,MAAOC,CAAAA,WAAP,KAAwB,kBAAxB,CACA,MAAOC,CAAAA,cAAP,KAA2B,qBAA3B,CACA,MAAOC,CAAAA,UAAP,KAAuB,iBAAvB,CAGA,cAAe,SAASC,CAAAA,KAAT,CAAeC,QAAf,CAAyBC,QAAzB,CAAmC,CAC9C,MAAO,UAAAC,QAAQ,CAAI,CACf,GAAMC,CAAAA,IAAI,CAAG,CACTH,QAAQ,CAAEA,QADD,CAETC,QAAQ,CAAEA,QAFD,CAAb,CAIA,GAAMG,CAAAA,WAAW,0FAAG,yKACKZ,CAAAA,KAAK,CAACa,IAAN,CAAW,8CAAX,CAA2DF,IAA3D,CADL,QACVG,MADU,eAETC,IAFS,CAEDD,MAFC,CAETC,IAFS,CAGhB,GAAG,CAACA,IAAI,CAACC,KAAT,CAAgB,CACZC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8BH,IAAI,CAACI,GAAnC,EACAT,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR,CACAM,QAAQ,CAACT,SAAS,CAACc,IAAI,CAACK,EAAN,CAAV,CAAR,CACAV,QAAQ,CAACR,cAAc,CAACa,IAAI,CAACM,WAAN,CAAf,CAAR,CACAX,QAAQ,CAACP,WAAW,CAAC,EAAD,CAAZ,CAAR,CACAO,QAAQ,CAACL,cAAc,CAAC,KAAD,CAAf,CAAR,CACAK,QAAQ,CAACJ,UAAU,CAAC,EAAD,CAAX,CAAR,CACH,CARD,IAQO,CACHI,QAAQ,CAACP,WAAW,CAAC,2BAAD,CAAZ,CAAR,CACH,CAbe,sDAAH,kBAAXS,CAAAA,WAAW,0CAAjB,CAeAA,WAAW,GACd,CArBD,CAsBH","sourcesContent":["import axios from 'axios'\nimport setUserID from './setUserID.js'\nimport setItineraries from './setItineraries.js'\nimport toggleError from './toggleError.js'\nimport toggleLogin from './toggleLogin.js';\nimport toggleDropdown from './toggleDropdown.js';\nimport toggleForm from './toggleForm.js';\n\n\nexport default function logIn(username, password) {\n    return dispatch => {\n        const user = {\n            username: username,\n            password: password\n        }\n        const postRequest = async () => { \n            const result = await axios.post('https://traveler-backend.herokuapp.com/login', user);\n            const {data} = result;\n            if(!data.error) {\n                localStorage.setItem(\"token\", data.jwt)\n                dispatch(toggleLogin(true));\n                dispatch(setUserID(data.id));\n                dispatch(setItineraries(data.itineraries))\n                dispatch(toggleError(''));\n                dispatch(toggleDropdown(false));\n                dispatch(toggleForm(''));\n            } else {\n                dispatch(toggleError('Invalid Username/Password'));\n            }\n        }\n        postRequest();\n    }\n}\n\n\n\n\n\n\n   "]},"metadata":{},"sourceType":"module"}