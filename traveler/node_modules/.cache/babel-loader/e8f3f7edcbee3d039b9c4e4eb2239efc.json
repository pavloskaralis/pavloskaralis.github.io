{"ast":null,"code":"import _regeneratorRuntime from\"/Users/pavloskaralis/Desktop/traveler_frontend/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/pavloskaralis/Desktop/traveler_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import axios from'axios';import toggleError from'./toggleError.js';import toggleForm from'./toggleForm.js';import swapItinerary from'./swapItinerary.js';import selectItinerary from'./selectItinerary.js';export default function putItinerary(location,departureDate,returnDate,itineraryID,index,shared,defaultDeparture){console.log('default departure',defaultDeparture);return function(dispatch){//check date format is valid\nvar regex=/(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;if(!departureDate.match(regex)||!returnDate.match(regex)){return dispatch(toggleError('Invalid Dates'));}//find today's date\nvar date=new Date();var dd=date.getDate();var mm=date.getMonth()+1;var yyyy=date.getFullYear();var today=[parseFloat(yyyy),parseFloat(mm),parseFloat(dd)];//original departure date\nvar splitDefaultDeparture=defaultDeparture.split('-');var parsedDefaultDeparture=splitDefaultDeparture.map(function(num){return parseFloat(num);});console.log('split default',splitDefaultDeparture);console.log('parsedDefault',parsedDefaultDeparture);//breakdown depart and return dates \nvar splitDepartureDate=departureDate.split('-');var splitReturnDate=returnDate.split('-');var parsedDepartureDate=splitDepartureDate.map(function(num){return parseFloat(num);});var parsedReturnDate=splitReturnDate.map(function(num){return parseFloat(num);});//check departure date occurs before return date, and on or after current date \n// [0] = YY; [1] = MM; [2] = DD;\nif(parsedDepartureDate[0]>parsedReturnDate[0]||parsedDepartureDate[0]<parsedDefaultDeparture[0]&&parsedDepartureDate[0]<today[0]){// console.log(1)\nreturn dispatch(toggleError('Invalid Dates'));//checks months\n}else if(parsedDepartureDate[0]===parsedReturnDate[0]&&parsedDepartureDate[1]>parsedReturnDate[1]||parsedDepartureDate[0]===parsedDefaultDeparture[0]&&parsedDepartureDate[1]<parsedDefaultDeparture[1]&&parsedDepartureDate[0]===today[0]&&parsedDepartureDate[1]<today[1]){// console.log(2)\nreturn dispatch(toggleError('Invalid Dates'));//checks days\n}else if(parsedDepartureDate[0]===parsedReturnDate[0]&&parsedDepartureDate[1]===parsedReturnDate[1]&&parsedDepartureDate[2]>parsedReturnDate[2]||parsedDepartureDate[0]===parsedDefaultDeparture[0]&&parsedDepartureDate[1]===parsedDefaultDeparture[1]&&parsedDepartureDate[2]<parsedDefaultDeparture[2]&&parsedDepartureDate[0]===today[0]&&parsedDepartureDate[1]===today[1]&&parsedDepartureDate[2]<today[2]){// console.log(3)\nreturn dispatch(toggleError('Invalid Dates'));}//make sure range won't break site; \n// [0] = YY; [1] = YY; [2] = DD;\nif(parsedDepartureDate[0]<parsedReturnDate[0]&&parsedDepartureDate[0]+1<parsedReturnDate[0]){return dispatch(toggleError('60 Day Limit'));}else if(parsedDepartureDate[0]===parsedReturnDate[0]&&parsedDepartureDate[1]+4<parsedReturnDate[1]){return dispatch(toggleError('60 Day Limit'));}//create array of dates\nvar dates=[];var endDate=new Date(returnDate);var nextDate=new Date(departureDate);while(nextDate<=endDate){var _dd=nextDate.getDate()+1;var _mm=nextDate.getMonth()+1;var _yyyy=nextDate.getFullYear();var day=[_mm,_dd,_yyyy];if(day[0]<10)day[0]='0'+day[0];if(day[1]<10)day[1]='0'+day[1];day[2]=day[2].toString().split('').slice(2).join('');dates.push(day[0]+'.'+day[1]+'.'+day[2]);nextDate.setDate(nextDate.getDate()+1);}//error in Date class adding extra day to each month\ndates.forEach(function(date,index){var sliced=date.slice(0,5);var errors=['01.32','02.30','03.32','04.31','05.32','06.31','07.32','08.32','09.31','10.32','11.31','12.32'];if(errors.indexOf(sliced)!==-1){switch(sliced){case errors[0]:dates[index]='02.01'+dates[index].slice(5);break;case errors[1]:dates[index]='03.01'+dates[index].slice(5);break;case errors[2]:dates[index]='04.01'+dates[index].slice(5);break;case errors[3]:dates[index]='05.01'+dates[index].slice(5);break;case errors[4]:dates[index]='06.01'+dates[index].slice(5);break;case errors[5]:dates[index]='07.01'+dates[index].slice(5);break;case errors[6]:dates[index]='08.01'+dates[index].slice(5);break;case errors[7]:dates[index]='09.01'+dates[index].slice(5);break;case errors[8]:dates[index]='10.01'+dates[index].slice(5);break;case errors[9]:dates[index]='11.01'+dates[index].slice(5);break;case errors[10]:dates[index]='12.01'+dates[index].slice(5);break;case errors[11]:dates[index]='01.01'+dates[index].slice(5);break;}}});//easier 60 day limit check\nif(dates.length>60)return dispatch(toggleError('60 Day Limit'));//post request\nvar updatedItinerary={location:location,dates:JSON.stringify(dates)};var postRequest=function postRequest(){var result,data,newDates;return _regeneratorRuntime.async(function postRequest$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(axios.put(\"https://traveler-backend.herokuapp.com/itineraries/\".concat(itineraryID),updatedItinerary));case 2:result=_context.sent;data=result.data;if(!data.error){dispatch(toggleError(''));dispatch(toggleForm(''));dispatch(selectItinerary(''));newDates=JSON.parse(updatedItinerary.dates);console.log(data.shared);dispatch(swapItinerary(_objectSpread({},updatedItinerary,{dates:newDates,id:itineraryID,shared:shared}),index));}else{dispatch(toggleError('Failed To Update'));}case 5:case\"end\":return _context.stop();}}});};postRequest();};}","map":{"version":3,"sources":["/Users/pavloskaralis/Desktop/traveler_frontend/src/actions/putItinerary.js"],"names":["axios","toggleError","toggleForm","swapItinerary","selectItinerary","putItinerary","location","departureDate","returnDate","itineraryID","index","shared","defaultDeparture","console","log","dispatch","regex","match","date","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","today","parseFloat","splitDefaultDeparture","split","parsedDefaultDeparture","map","num","splitDepartureDate","splitReturnDate","parsedDepartureDate","parsedReturnDate","dates","endDate","nextDate","day","toString","slice","join","push","setDate","forEach","sliced","errors","indexOf","length","updatedItinerary","JSON","stringify","postRequest","put","result","data","error","newDates","parse","id"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport toggleError from './toggleError.js'\nimport toggleForm from './toggleForm.js'\nimport swapItinerary from './swapItinerary.js'\nimport selectItinerary from './selectItinerary.js';\n\nexport default function putItinerary(location,departureDate,returnDate, itineraryID, index, shared, defaultDeparture) {\n    console.log('default departure', defaultDeparture)\n    return dispatch => {\n        //check date format is valid\n        const regex = /(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;\n        if(!departureDate.match(regex) || !returnDate.match(regex)){\n            return dispatch(toggleError('Invalid Dates'));\n        } \n        //find today's date\n        const date = new Date();\n        const dd = date.getDate();\n        const mm = date.getMonth() + 1;\n        const yyyy = date.getFullYear();\n        const today = [parseFloat(yyyy), parseFloat(mm), parseFloat(dd)]\n        //original departure date\n        const splitDefaultDeparture = defaultDeparture.split('-');\n        const parsedDefaultDeparture = splitDefaultDeparture.map(num => parseFloat(num));\n        console.log('split default', splitDefaultDeparture)\n        console.log('parsedDefault', parsedDefaultDeparture)\n        //breakdown depart and return dates \n        const splitDepartureDate = departureDate.split('-');\n        const splitReturnDate = returnDate.split('-');\n        const parsedDepartureDate = splitDepartureDate.map(num => parseFloat(num));\n        const parsedReturnDate = splitReturnDate.map(num => parseFloat(num));\n        //check departure date occurs before return date, and on or after current date \n        // [0] = YY; [1] = MM; [2] = DD;\n        if(parsedDepartureDate[0] > parsedReturnDate[0] || \n            (parsedDepartureDate[0] < parsedDefaultDeparture[0] && parsedDepartureDate[0] < today[0])) { \n            // console.log(1)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks months\n        } else if((parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] > parsedReturnDate[1]) || \n                ((parsedDepartureDate[0] === parsedDefaultDeparture[0] && parsedDepartureDate[1] < parsedDefaultDeparture[1]) && \n                (parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] < today[1]) )) {\n            // console.log(2)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks days\n        } else if ((parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] === parsedReturnDate[1] && parsedDepartureDate[2] > parsedReturnDate[2]) || \n            ((parsedDepartureDate[0] === parsedDefaultDeparture[0] && parsedDepartureDate[1] === parsedDefaultDeparture[1] && parsedDepartureDate[2] < parsedDefaultDeparture[2]) && \n            (parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] === today[1] && parsedDepartureDate[2] < today[2]))) {\n            // console.log(3)\n            return dispatch(toggleError('Invalid Dates'));\n        }\n        //make sure range won't break site; \n        // [0] = YY; [1] = YY; [2] = DD;\n        if((parsedDepartureDate[0] < parsedReturnDate[0]) && ((parsedDepartureDate[0] + 1) < parsedReturnDate[0])) {\n            return dispatch(toggleError('60 Day Limit'));\n        } else if ((parsedDepartureDate[0] === parsedReturnDate[0]) && ((parsedDepartureDate[1] + 4) < parsedReturnDate[1])) {\n            return dispatch(toggleError('60 Day Limit'));\n        }\n        //create array of dates\n        const dates = [];\n        const endDate = new Date(returnDate); \n        let nextDate = new Date(departureDate);\n        while (nextDate <= endDate) {\n            const dd = nextDate.getDate() + 1;\n            const mm = nextDate.getMonth() + 1;\n            const yyyy = nextDate.getFullYear();\n            let day = [mm, dd, yyyy];\n            if(day[0] < 10) day[0] = '0'+ day[0];\n            if(day[1] < 10) day[1] = '0'+ day[1];\n            day[2] = day[2].toString().split('').slice(2).join('');\n            dates.push(day[0] + '.' + day[1] + '.' + day[2]);\n            nextDate.setDate(nextDate.getDate() + 1);\n        }\n        //error in Date class adding extra day to each month\n        dates.forEach((date,index) => {\n            const sliced = date.slice(0,5);\n            const errors = ['01.32','02.30','03.32','04.31','05.32','06.31','07.32','08.32','09.31','10.32','11.31','12.32'];\n            if(errors.indexOf(sliced) !== -1 ) {\n                switch (sliced) {\n                    case errors[0]: dates[index] = '02.01' + dates[index].slice(5);\n                        break;\n                    case errors[1]: dates[index] = '03.01' + dates[index].slice(5);\n                        break;\n                    case errors[2]: dates[index] = '04.01' + dates[index].slice(5);\n                        break;\n                    case errors[3]: dates[index] = '05.01' + dates[index].slice(5);\n                        break;\n                    case errors[4]: dates[index] = '06.01' + dates[index].slice(5);\n                        break;\n                    case errors[5]: dates[index] = '07.01' + dates[index].slice(5);\n                        break;\n                    case errors[6]: dates[index] = '08.01' + dates[index].slice(5);\n                        break;\n                    case errors[7]: dates[index] = '09.01' + dates[index].slice(5);\n                        break;\n                    case errors[8]: dates[index] = '10.01' + dates[index].slice(5);\n                        break;\n                    case errors[9]: dates[index] = '11.01' + dates[index].slice(5);\n                        break;\n                    case errors[10]: dates[index] = '12.01' + dates[index].slice(5);\n                        break;\n                    case errors[11]: dates[index] = '01.01' + dates[index].slice(5);\n                        break;\n                }       \n            }\n        });\n        //easier 60 day limit check\n        if(dates.length > 60) return dispatch(toggleError('60 Day Limit'));\n        //post request\n        const updatedItinerary = {\n            location: location,\n            dates:  JSON.stringify(dates)\n        }\n        const postRequest = async () => {\n            const result = await axios.put(`https://traveler-backend.herokuapp.com/itineraries/${itineraryID}`, updatedItinerary);\n            const {data} = result;\n            if (!data.error) {\n                dispatch(toggleError(''));\n                dispatch(toggleForm(''));\n                dispatch(selectItinerary(''));\n                const newDates = JSON.parse(updatedItinerary.dates)\n                console.log(data.shared)\n                dispatch(swapItinerary({...updatedItinerary, dates: newDates, id: itineraryID, shared: shared}, index))\n            } else {\n                dispatch(toggleError('Failed To Update'));\n            }\n        }\n        postRequest();\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}