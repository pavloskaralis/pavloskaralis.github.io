{"ast":null,"code":"import axios from 'axios';\nimport toggleError from './toggleError.js';\nimport toggleForm from './toggleForm.js';\nimport swapItinerary from './swapItinerary.js';\nimport selectItinerary from './selectItinerary.js';\nexport default function putItinerary(location, departureDate, returnDate, itineraryID, index, shared, defaultDeparture) {\n  console.log('default departure', defaultDeparture);\n  return dispatch => {\n    //check date format is valid\n    const regex = /(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;\n\n    if (!departureDate.match(regex) || !returnDate.match(regex)) {\n      return dispatch(toggleError('Invalid Dates'));\n    } //find today's date\n\n\n    const date = new Date();\n    const dd = date.getDate();\n    const mm = date.getMonth() + 1;\n    const yyyy = date.getFullYear();\n    const today = [parseFloat(yyyy), parseFloat(mm), parseFloat(dd)]; //original departure date\n\n    const splitDefaultDeparture = defaultDeparture.split('-');\n    const parsedDefaultDeparture = splitDefaultDeparture.map(num => parseFloat(num));\n    console.log('split default', splitDefaultDeparture);\n    console.log('parsedDefault', parsedDefaultDeparture); //breakdown depart and return dates \n\n    const splitDepartureDate = departureDate.split('-');\n    const splitReturnDate = returnDate.split('-');\n    const parsedDepartureDate = splitDepartureDate.map(num => parseFloat(num));\n    const parsedReturnDate = splitReturnDate.map(num => parseFloat(num)); //check departure date occurs before return date, and on or after current date \n    // [0] = YY; [1] = MM; [2] = DD;\n\n    if (parsedDepartureDate[0] > parsedReturnDate[0] || parsedDepartureDate[0] < parsedDefaultDeparture[0] && parsedDepartureDate[0] < today[0]) {\n      // console.log(1)\n      return dispatch(toggleError('Invalid Dates')); //checks months\n    } else if (parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] > parsedReturnDate[1] || parsedDepartureDate[0] === parsedDefaultDeparture[0] && parsedDepartureDate[1] < parsedDefaultDeparture[1] && parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] < today[1]) {\n      // console.log(2)\n      return dispatch(toggleError('Invalid Dates')); //checks days\n    } else if (parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] === parsedReturnDate[1] && parsedDepartureDate[2] > parsedReturnDate[2] || parsedDepartureDate[0] === parsedDefaultDeparture[0] && parsedDepartureDate[1] === parsedDefaultDeparture[1] && parsedDepartureDate[2] < parsedDefaultDeparture[2] && parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] === today[1] && parsedDepartureDate[2] < today[2]) {\n      // console.log(3)\n      return dispatch(toggleError('Invalid Dates'));\n    } //make sure range won't break site; \n    // [0] = YY; [1] = YY; [2] = DD;\n\n\n    if (parsedDepartureDate[0] < parsedReturnDate[0] && parsedDepartureDate[0] + 1 < parsedReturnDate[0]) {\n      return dispatch(toggleError('60 Day Limit'));\n    } else if (parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] + 4 < parsedReturnDate[1]) {\n      return dispatch(toggleError('60 Day Limit'));\n    } //create array of dates\n\n\n    const dates = [];\n    const endDate = new Date(returnDate);\n    let nextDate = new Date(departureDate);\n\n    while (nextDate <= endDate) {\n      const dd = nextDate.getDate() + 1;\n      const mm = nextDate.getMonth() + 1;\n      const yyyy = nextDate.getFullYear();\n      let day = [mm, dd, yyyy];\n      if (day[0] < 10) day[0] = '0' + day[0];\n      if (day[1] < 10) day[1] = '0' + day[1];\n      day[2] = day[2].toString().split('').slice(2).join('');\n      dates.push(day[0] + '.' + day[1] + '.' + day[2]);\n      nextDate.setDate(nextDate.getDate() + 1);\n    } //error in Date class adding extra day to each month\n\n\n    dates.forEach((date, index) => {\n      const sliced = date.slice(0, 5);\n      const errors = ['01.32', '02.30', '03.32', '04.31', '05.32', '06.31', '07.32', '08.32', '09.31', '10.32', '11.31', '12.32'];\n\n      if (errors.indexOf(sliced) !== -1) {\n        switch (sliced) {\n          case errors[0]:\n            dates[index] = '02.01' + dates[index].slice(5);\n            break;\n\n          case errors[1]:\n            dates[index] = '03.01' + dates[index].slice(5);\n            break;\n\n          case errors[2]:\n            dates[index] = '04.01' + dates[index].slice(5);\n            break;\n\n          case errors[3]:\n            dates[index] = '05.01' + dates[index].slice(5);\n            break;\n\n          case errors[4]:\n            dates[index] = '06.01' + dates[index].slice(5);\n            break;\n\n          case errors[5]:\n            dates[index] = '07.01' + dates[index].slice(5);\n            break;\n\n          case errors[6]:\n            dates[index] = '08.01' + dates[index].slice(5);\n            break;\n\n          case errors[7]:\n            dates[index] = '09.01' + dates[index].slice(5);\n            break;\n\n          case errors[8]:\n            dates[index] = '10.01' + dates[index].slice(5);\n            break;\n\n          case errors[9]:\n            dates[index] = '11.01' + dates[index].slice(5);\n            break;\n\n          case errors[10]:\n            dates[index] = '12.01' + dates[index].slice(5);\n            break;\n\n          case errors[11]:\n            dates[index] = '01.01' + dates[index].slice(5);\n            break;\n        }\n      }\n    }); //easier 60 day limit check\n\n    if (dates.length > 60) return dispatch(toggleError('60 Day Limit')); //post request\n\n    const updatedItinerary = {\n      location: location,\n      dates: JSON.stringify(dates)\n    };\n\n    const postRequest = async () => {\n      const result = await axios.put(`https://traveler-backend.herokuapp.com/itineraries/${itineraryID}`, updatedItinerary);\n      const {\n        data\n      } = result;\n\n      if (!data.error) {\n        dispatch(toggleError(''));\n        dispatch(toggleForm(''));\n        dispatch(selectItinerary(''));\n        const newDates = JSON.parse(updatedItinerary.dates);\n        console.log(data.shared);\n        dispatch(swapItinerary({ ...updatedItinerary,\n          dates: newDates,\n          id: itineraryID,\n          shared: shared\n        }, index));\n      } else {\n        dispatch(toggleError('Failed To Update'));\n      }\n    };\n\n    postRequest();\n  };\n}","map":{"version":3,"sources":["/Users/pavloskaralis/Desktop/pavloskaralis.github.io/traveler/src/actions/putItinerary.js"],"names":["axios","toggleError","toggleForm","swapItinerary","selectItinerary","putItinerary","location","departureDate","returnDate","itineraryID","index","shared","defaultDeparture","console","log","dispatch","regex","match","date","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","today","parseFloat","splitDefaultDeparture","split","parsedDefaultDeparture","map","num","splitDepartureDate","splitReturnDate","parsedDepartureDate","parsedReturnDate","dates","endDate","nextDate","day","toString","slice","join","push","setDate","forEach","sliced","errors","indexOf","length","updatedItinerary","JSON","stringify","postRequest","result","put","data","error","newDates","parse","id"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport toggleError from './toggleError.js'\nimport toggleForm from './toggleForm.js'\nimport swapItinerary from './swapItinerary.js'\nimport selectItinerary from './selectItinerary.js';\n\nexport default function putItinerary(location,departureDate,returnDate, itineraryID, index, shared, defaultDeparture) {\n    console.log('default departure', defaultDeparture)\n    return dispatch => {\n        //check date format is valid\n        const regex = /(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;\n        if(!departureDate.match(regex) || !returnDate.match(regex)){\n            return dispatch(toggleError('Invalid Dates'));\n        } \n        //find today's date\n        const date = new Date();\n        const dd = date.getDate();\n        const mm = date.getMonth() + 1;\n        const yyyy = date.getFullYear();\n        const today = [parseFloat(yyyy), parseFloat(mm), parseFloat(dd)]\n        //original departure date\n        const splitDefaultDeparture = defaultDeparture.split('-');\n        const parsedDefaultDeparture = splitDefaultDeparture.map(num => parseFloat(num));\n        console.log('split default', splitDefaultDeparture)\n        console.log('parsedDefault', parsedDefaultDeparture)\n        //breakdown depart and return dates \n        const splitDepartureDate = departureDate.split('-');\n        const splitReturnDate = returnDate.split('-');\n        const parsedDepartureDate = splitDepartureDate.map(num => parseFloat(num));\n        const parsedReturnDate = splitReturnDate.map(num => parseFloat(num));\n        //check departure date occurs before return date, and on or after current date \n        // [0] = YY; [1] = MM; [2] = DD;\n        if(parsedDepartureDate[0] > parsedReturnDate[0] || \n            (parsedDepartureDate[0] < parsedDefaultDeparture[0] && parsedDepartureDate[0] < today[0])) { \n            // console.log(1)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks months\n        } else if((parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] > parsedReturnDate[1]) || \n                ((parsedDepartureDate[0] === parsedDefaultDeparture[0] && parsedDepartureDate[1] < parsedDefaultDeparture[1]) && \n                (parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] < today[1]) )) {\n            // console.log(2)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks days\n        } else if ((parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] === parsedReturnDate[1] && parsedDepartureDate[2] > parsedReturnDate[2]) || \n            ((parsedDepartureDate[0] === parsedDefaultDeparture[0] && parsedDepartureDate[1] === parsedDefaultDeparture[1] && parsedDepartureDate[2] < parsedDefaultDeparture[2]) && \n            (parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] === today[1] && parsedDepartureDate[2] < today[2]))) {\n            // console.log(3)\n            return dispatch(toggleError('Invalid Dates'));\n        }\n        //make sure range won't break site; \n        // [0] = YY; [1] = YY; [2] = DD;\n        if((parsedDepartureDate[0] < parsedReturnDate[0]) && ((parsedDepartureDate[0] + 1) < parsedReturnDate[0])) {\n            return dispatch(toggleError('60 Day Limit'));\n        } else if ((parsedDepartureDate[0] === parsedReturnDate[0]) && ((parsedDepartureDate[1] + 4) < parsedReturnDate[1])) {\n            return dispatch(toggleError('60 Day Limit'));\n        }\n        //create array of dates\n        const dates = [];\n        const endDate = new Date(returnDate); \n        let nextDate = new Date(departureDate);\n        while (nextDate <= endDate) {\n            const dd = nextDate.getDate() + 1;\n            const mm = nextDate.getMonth() + 1;\n            const yyyy = nextDate.getFullYear();\n            let day = [mm, dd, yyyy];\n            if(day[0] < 10) day[0] = '0'+ day[0];\n            if(day[1] < 10) day[1] = '0'+ day[1];\n            day[2] = day[2].toString().split('').slice(2).join('');\n            dates.push(day[0] + '.' + day[1] + '.' + day[2]);\n            nextDate.setDate(nextDate.getDate() + 1);\n        }\n        //error in Date class adding extra day to each month\n        dates.forEach((date,index) => {\n            const sliced = date.slice(0,5);\n            const errors = ['01.32','02.30','03.32','04.31','05.32','06.31','07.32','08.32','09.31','10.32','11.31','12.32'];\n            if(errors.indexOf(sliced) !== -1 ) {\n                switch (sliced) {\n                    case errors[0]: dates[index] = '02.01' + dates[index].slice(5);\n                        break;\n                    case errors[1]: dates[index] = '03.01' + dates[index].slice(5);\n                        break;\n                    case errors[2]: dates[index] = '04.01' + dates[index].slice(5);\n                        break;\n                    case errors[3]: dates[index] = '05.01' + dates[index].slice(5);\n                        break;\n                    case errors[4]: dates[index] = '06.01' + dates[index].slice(5);\n                        break;\n                    case errors[5]: dates[index] = '07.01' + dates[index].slice(5);\n                        break;\n                    case errors[6]: dates[index] = '08.01' + dates[index].slice(5);\n                        break;\n                    case errors[7]: dates[index] = '09.01' + dates[index].slice(5);\n                        break;\n                    case errors[8]: dates[index] = '10.01' + dates[index].slice(5);\n                        break;\n                    case errors[9]: dates[index] = '11.01' + dates[index].slice(5);\n                        break;\n                    case errors[10]: dates[index] = '12.01' + dates[index].slice(5);\n                        break;\n                    case errors[11]: dates[index] = '01.01' + dates[index].slice(5);\n                        break;\n                }       \n            }\n        });\n        //easier 60 day limit check\n        if(dates.length > 60) return dispatch(toggleError('60 Day Limit'));\n        //post request\n        const updatedItinerary = {\n            location: location,\n            dates:  JSON.stringify(dates)\n        }\n        const postRequest = async () => {\n            const result = await axios.put(`https://traveler-backend.herokuapp.com/itineraries/${itineraryID}`, updatedItinerary);\n            const {data} = result;\n            if (!data.error) {\n                dispatch(toggleError(''));\n                dispatch(toggleForm(''));\n                dispatch(selectItinerary(''));\n                const newDates = JSON.parse(updatedItinerary.dates)\n                console.log(data.shared)\n                dispatch(swapItinerary({...updatedItinerary, dates: newDates, id: itineraryID, shared: shared}, index))\n            } else {\n                dispatch(toggleError('Failed To Update'));\n            }\n        }\n        postRequest();\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}