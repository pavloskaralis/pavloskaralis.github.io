{"ast":null,"code":"import _toConsumableArray from\"/Users/pavloskaralis/Desktop/traveler_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/pavloskaralis/Desktop/traveler_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";export default function itinerary(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'SELECT_ITINERARY':return action.itinerary;case'ADD_PLANNING':return _objectSpread({},state,{planning_rows:[].concat(_toConsumableArray(state.planning_rows),[action.planning_row])});case'ADD_SCHEDULING':return _objectSpread({},state,{scheduling_rows:[].concat(_toConsumableArray(state.scheduling_rows),[action.scheduling_row])});case'SWAP_PLANNING':var planning_index=state.planning_rows.findIndex(function(planning_row){return planning_row.id===action.id;});return _objectSpread({},state,{planning_rows:[].concat(_toConsumableArray(state.planning_rows.slice(0,planning_index)),[action.planning_row],_toConsumableArray(state.planning_rows.slice(planning_index+1)))});case'SWAP_SCHEDULING':var scheduling_index=state.scheduling_rows.findIndex(function(scheduling_row){return scheduling_row.id===action.id;});return _objectSpread({},state,{scheduling_rows:[].concat(_toConsumableArray(state.scheduling_rows.slice(0,scheduling_index)),[action.scheduling_row],_toConsumableArray(state.scheduling_rows.slice(scheduling_index+1)))});case'REMOVE_SCHEDULING':return _objectSpread({},state,{scheduling_rows:state.scheduling_rows.filter(function(scheduling_row){return scheduling_row.id!==action.id;})});default:return state;}}","map":{"version":3,"sources":["/Users/pavloskaralis/Desktop/traveler_frontend/src/reducers/itinerary.js"],"names":["itinerary","state","action","type","planning_rows","planning_row","scheduling_rows","scheduling_row","planning_index","findIndex","id","slice","scheduling_index","filter"],"mappings":"yQAAA,cAAe,SAASA,CAAAA,SAAT,EAAuC,IAApBC,CAAAA,KAAoB,2DAAZ,EAAY,IAARC,CAAAA,MAAQ,2CAClD,OAAQA,MAAM,CAACC,IAAf,EACI,IAAK,kBAAL,CACI,MAAOD,CAAAA,MAAM,CAACF,SAAd,CACJ,IAAK,cAAL,CACI,wBAAWC,KAAX,EAAkBG,aAAa,8BAAMH,KAAK,CAACG,aAAZ,GAA0BF,MAAM,CAACG,YAAjC,EAA/B,GACJ,IAAK,gBAAL,CACI,wBAAWJ,KAAX,EAAkBK,eAAe,8BAAML,KAAK,CAACK,eAAZ,GAA4BJ,MAAM,CAACK,cAAnC,EAAjC,GACJ,IAAK,eAAL,CACI,GAAIC,CAAAA,cAAc,CAAGP,KAAK,CAACG,aAAN,CAAoBK,SAApB,CAA8B,SAAAJ,YAAY,QAAIA,CAAAA,YAAY,CAACK,EAAb,GAAoBR,MAAM,CAACQ,EAA/B,EAA1C,CAArB,CACA,wBAAWT,KAAX,EAAkBG,aAAa,8BAAMH,KAAK,CAACG,aAAN,CAAoBO,KAApB,CAA0B,CAA1B,CAA6BH,cAA7B,CAAN,GAAoDN,MAAM,CAACG,YAA3D,qBAA4EJ,KAAK,CAACG,aAAN,CAAoBO,KAApB,CAA0BH,cAAc,CAAG,CAA3C,CAA5E,EAA/B,GACJ,IAAK,iBAAL,CACI,GAAII,CAAAA,gBAAgB,CAAGX,KAAK,CAACK,eAAN,CAAsBG,SAAtB,CAAgC,SAAAF,cAAc,QAAIA,CAAAA,cAAc,CAACG,EAAf,GAAsBR,MAAM,CAACQ,EAAjC,EAA9C,CAAvB,CACA,wBAAWT,KAAX,EAAkBK,eAAe,8BAAML,KAAK,CAACK,eAAN,CAAsBK,KAAtB,CAA4B,CAA5B,CAA+BC,gBAA/B,CAAN,GAAwDV,MAAM,CAACK,cAA/D,qBAAkFN,KAAK,CAACK,eAAN,CAAsBK,KAAtB,CAA4BC,gBAAgB,CAAG,CAA/C,CAAlF,EAAjC,GACJ,IAAK,mBAAL,CACI,wBAAWX,KAAX,EAAkBK,eAAe,CAAEL,KAAK,CAACK,eAAN,CAAsBO,MAAtB,CAA6B,SAAAN,cAAc,QAAIA,CAAAA,cAAc,CAACG,EAAf,GAAsBR,MAAM,CAACQ,EAAjC,EAA3C,CAAnC,GACJ,QACI,MAAOT,CAAAA,KAAP,CAhBR,CAkBH","sourcesContent":["export default function itinerary(state = '', action) {\n    switch (action.type) {\n        case 'SELECT_ITINERARY':\n            return action.itinerary\n        case 'ADD_PLANNING':\n            return {...state, planning_rows: [...state.planning_rows,action.planning_row]}\n        case 'ADD_SCHEDULING':\n            return {...state, scheduling_rows: [...state.scheduling_rows,action.scheduling_row]}\n        case 'SWAP_PLANNING':\n            let planning_index = state.planning_rows.findIndex(planning_row => planning_row.id === action.id);\n            return {...state, planning_rows: [...state.planning_rows.slice(0, planning_index), action.planning_row, ...state.planning_rows.slice(planning_index + 1)]}\n        case 'SWAP_SCHEDULING':\n            let scheduling_index = state.scheduling_rows.findIndex(scheduling_row => scheduling_row.id === action.id);\n            return {...state, scheduling_rows: [...state.scheduling_rows.slice(0, scheduling_index), action.scheduling_row, ...state.scheduling_rows.slice(scheduling_index + 1)] }\n        case 'REMOVE_SCHEDULING':\n            return {...state, scheduling_rows: state.scheduling_rows.filter(scheduling_row => scheduling_row.id !== action.id)}\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}