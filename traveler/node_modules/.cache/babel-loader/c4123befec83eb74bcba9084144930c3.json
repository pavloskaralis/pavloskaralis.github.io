{"ast":null,"code":"import _regeneratorRuntime from\"/Users/pavloskaralis/Desktop/traveler_frontend/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/pavloskaralis/Desktop/traveler_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import axios from'axios';import toggleError from'./toggleError.js';import toggleForm from'./toggleForm.js';import addItinerary from'./addItinerary.js';export default function postItinerary(location,departureDate,returnDate,userID){return function(dispatch){//check date format is valid\nvar regex=/(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;if(!departureDate.match(regex)||!returnDate.match(regex)){return dispatch(toggleError('Invalid Date Format'));}//find today's date\nvar date=new Date();var dd=date.getDate();var mm=date.getMonth()+1;var yyyy=date.getFullYear();var today=[parseFloat(yyyy),parseFloat(mm),parseFloat(dd)];//breakdown depart and return dates \nvar splitDepartureDate=departureDate.split('-');var splitReturnDate=returnDate.split('-');var parsedDepartureDate=splitDepartureDate.map(function(num){return parseFloat(num);});var parsedReturnDate=splitReturnDate.map(function(num){return parseFloat(num);});//check departure date occurs before return date and after today,\n// [0] = YY; [1] = MM; [2] = DD;\n//checks years\nif(parsedDepartureDate[0]>parsedReturnDate[0]||parsedDepartureDate[0]<today[0]){// console.log(1)\nreturn dispatch(toggleError('Invalid Dates'));//checks months\n}else if(parsedDepartureDate[0]===parsedReturnDate[0]&&parsedDepartureDate[1]>parsedReturnDate[1]||parsedDepartureDate[0]===today[0]&&parsedDepartureDate[1]<today[1]){// console.log(2)\nreturn dispatch(toggleError('Invalid Dates'));//checks days\n}else if(parsedDepartureDate[0]===parsedReturnDate[0]&&parsedDepartureDate[1]===parsedReturnDate[1]&&parsedDepartureDate[2]>parsedReturnDate[2]||parsedDepartureDate[0]===today[0]&&parsedDepartureDate[1]===today[1]&&parsedDepartureDate[2]<today[2]){// console.log(3)\nreturn dispatch(toggleError('Invalid Dates'));}//make sure range won't break site; \n// [0] = YY; [1] = YY; [2] = DD;\nif(parsedDepartureDate[0]<parsedReturnDate[0]&&parsedDepartureDate[0]+1<parsedReturnDate[0]){return dispatch(toggleError('60 Day Limit'));}else if(parsedDepartureDate[0]===parsedReturnDate[0]&&parsedDepartureDate[1]+4<parsedReturnDate[1]){return dispatch(toggleError('60 Day Limit'));}//create array of dates\nvar dates=[];var endDate=new Date(returnDate);var nextDate=new Date(departureDate);while(nextDate<=endDate){var _dd=nextDate.getDate()+1;var _mm=nextDate.getMonth()+1;var _yyyy=nextDate.getFullYear();var day=[_mm,_dd,_yyyy];if(day[0]<10)day[0]='0'+day[0];if(day[1]<10)day[1]='0'+day[1];day[2]=day[2].toString().split('').slice(2).join('');dates.push(day[0]+'.'+day[1]+'.'+day[2]);nextDate.setDate(nextDate.getDate()+1);}//error in Date class adding extra day to each month\ndates.forEach(function(date,index){var sliced=date.slice(0,5);var errors=['01.32','02.30','03.32','04.31','05.32','06.31','07.32','08.32','09.31','10.32','11.31','12.32'];if(errors.indexOf(sliced)!==-1){switch(sliced){case errors[0]:dates[index]='02.01'+dates[index].slice(5);break;case errors[1]:dates[index]='03.01'+dates[index].slice(5);break;case errors[2]:dates[index]='04.01'+dates[index].slice(5);break;case errors[3]:dates[index]='05.01'+dates[index].slice(5);break;case errors[4]:dates[index]='06.01'+dates[index].slice(5);break;case errors[5]:dates[index]='07.01'+dates[index].slice(5);break;case errors[6]:dates[index]='08.01'+dates[index].slice(5);break;case errors[7]:dates[index]='09.01'+dates[index].slice(5);break;case errors[8]:dates[index]='10.01'+dates[index].slice(5);break;case errors[9]:dates[index]='11.01'+dates[index].slice(5);break;case errors[10]:dates[index]='12.01'+dates[index].slice(5);break;case errors[11]:dates[index]='01.01'+dates[index].slice(5);break;}}});if(dates.find(function(date){return date.slice(0,5)==='02.30';})){var errorIndex=dates.indexOf(dates.find(function(date){return date.slice(0,5)==='02.30';}));dates[errorIndex]='03.01'+dates[errorIndex].slice(5);}//easier 60 day limit check\nif(dates.length>60)return dispatch(toggleError('60 Day Limit'));//post request\nvar newItinerary={location:location,dates:JSON.stringify(dates),shared:false};var postRequest=function postRequest(){var result,data,newDates;return _regeneratorRuntime.async(function postRequest$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(toggleError('Saving Itinerary...'));_context.next=3;return _regeneratorRuntime.awrap(axios.post(\"https://traveler-backend.herokuapp.com/users/\".concat(userID,\"/itineraries\"),newItinerary));case 3:result=_context.sent;data=result.data;if(!data.error){dispatch(toggleError(''));dispatch(toggleForm(''));newDates=JSON.parse(newItinerary.dates);dispatch(addItinerary(_objectSpread({},newItinerary,{dates:newDates,id:data.id})));}else{dispatch(toggleError('Failed To Save'));}case 6:case\"end\":return _context.stop();}}});};postRequest();};}","map":{"version":3,"sources":["/Users/pavloskaralis/Desktop/traveler_frontend/src/actions/postItinerary.js"],"names":["axios","toggleError","toggleForm","addItinerary","postItinerary","location","departureDate","returnDate","userID","dispatch","regex","match","date","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","today","parseFloat","splitDepartureDate","split","splitReturnDate","parsedDepartureDate","map","num","parsedReturnDate","dates","endDate","nextDate","day","toString","slice","join","push","setDate","forEach","index","sliced","errors","indexOf","find","errorIndex","length","newItinerary","JSON","stringify","shared","postRequest","post","result","data","error","newDates","parse","id"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport toggleError from './toggleError.js'\nimport toggleForm from './toggleForm.js'\nimport addItinerary from './addItinerary.js';\n\nexport default function postItinerary(location,departureDate,returnDate,userID) {\n    return dispatch => {\n        //check date format is valid\n        const regex = /(20)[2-9]\\d-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])/i;\n        if(!departureDate.match(regex) || !returnDate.match(regex)){\n            return dispatch(toggleError('Invalid Date Format'));\n        } \n        //find today's date\n        const date = new Date();\n        const dd = date.getDate();\n        const mm = date.getMonth() + 1;\n        const yyyy = date.getFullYear();\n        const today = [parseFloat(yyyy), parseFloat(mm), parseFloat(dd)]\n        //breakdown depart and return dates \n        const splitDepartureDate = departureDate.split('-');\n        const splitReturnDate = returnDate.split('-');\n        const parsedDepartureDate = splitDepartureDate.map(num => parseFloat(num));\n        const parsedReturnDate = splitReturnDate.map(num => parseFloat(num));\n        //check departure date occurs before return date and after today,\n        // [0] = YY; [1] = MM; [2] = DD;\n        //checks years\n        if(parsedDepartureDate[0] > parsedReturnDate[0] || parsedDepartureDate[0] < today[0]) { \n            // console.log(1)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks months\n        } else if((parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] > parsedReturnDate[1]) || (parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] < today[1])) {\n            // console.log(2)\n            return dispatch(toggleError('Invalid Dates'));\n        //checks days\n        } else if ((parsedDepartureDate[0] === parsedReturnDate[0] && parsedDepartureDate[1] === parsedReturnDate[1] && parsedDepartureDate[2] > parsedReturnDate[2]) || (parsedDepartureDate[0] === today[0] && parsedDepartureDate[1] === today[1] && parsedDepartureDate[2] < today[2])) {\n            // console.log(3)\n            return dispatch(toggleError('Invalid Dates'));\n        }\n        //make sure range won't break site; \n        // [0] = YY; [1] = YY; [2] = DD;\n        if((parsedDepartureDate[0] < parsedReturnDate[0]) && ((parsedDepartureDate[0] + 1) < parsedReturnDate[0])) {\n            return dispatch(toggleError('60 Day Limit'));\n        } else if ((parsedDepartureDate[0] === parsedReturnDate[0]) && ((parsedDepartureDate[1] + 4) < parsedReturnDate[1])) {\n            return dispatch(toggleError('60 Day Limit'));\n        }\n        //create array of dates\n        const dates = [];\n        const endDate = new Date(returnDate); \n        let nextDate = new Date(departureDate);\n        while (nextDate <= endDate) {\n            const dd = nextDate.getDate() + 1;\n            const mm = nextDate.getMonth() + 1;\n            const yyyy = nextDate.getFullYear();\n            let day = [mm, dd, yyyy];\n            if(day[0] < 10) day[0] = '0'+ day[0];\n            if(day[1] < 10) day[1] = '0'+ day[1];\n            day[2] = day[2].toString().split('').slice(2).join('');\n            dates.push(day[0] + '.' + day[1] + '.' + day[2]);\n            nextDate.setDate(nextDate.getDate() + 1);\n        }\n        //error in Date class adding extra day to each month\n        dates.forEach((date,index) => {\n            const sliced = date.slice(0,5);\n            const errors = ['01.32','02.30','03.32','04.31','05.32','06.31','07.32','08.32','09.31','10.32','11.31','12.32'];\n            if(errors.indexOf(sliced) !== -1 ) {\n                switch (sliced) {\n                    case errors[0]: dates[index] = '02.01' + dates[index].slice(5);\n                        break;\n                    case errors[1]: dates[index] = '03.01' + dates[index].slice(5);\n                        break;\n                    case errors[2]: dates[index] = '04.01' + dates[index].slice(5);\n                        break;\n                    case errors[3]: dates[index] = '05.01' + dates[index].slice(5);\n                        break;\n                    case errors[4]: dates[index] = '06.01' + dates[index].slice(5);\n                        break;\n                    case errors[5]: dates[index] = '07.01' + dates[index].slice(5);\n                        break;\n                    case errors[6]: dates[index] = '08.01' + dates[index].slice(5);\n                        break;\n                    case errors[7]: dates[index] = '09.01' + dates[index].slice(5);\n                        break;\n                    case errors[8]: dates[index] = '10.01' + dates[index].slice(5);\n                        break;\n                    case errors[9]: dates[index] = '11.01' + dates[index].slice(5);\n                        break;\n                    case errors[10]: dates[index] = '12.01' + dates[index].slice(5);\n                        break;\n                    case errors[11]: dates[index] = '01.01' + dates[index].slice(5);\n                        break;\n                }       \n            }\n        });\n        if(dates.find(date => date.slice(0,5) === ('02.30'))) {\n            let errorIndex = dates.indexOf(dates.find(date => date.slice(0,5) === ('02.30')));\n            dates[errorIndex] = '03.01' + dates[errorIndex].slice(5);\n        }\n        //easier 60 day limit check\n        if(dates.length > 60) return dispatch(toggleError('60 Day Limit'));\n        //post request\n        const newItinerary = {\n            location: location,\n            dates:  JSON.stringify(dates),\n            shared: false\n        }\n        const postRequest = async () => {\n            dispatch(toggleError('Saving Itinerary...'));\n            const result = await axios.post(`https://traveler-backend.herokuapp.com/users/${userID}/itineraries`, newItinerary);\n            const {data} = result;\n            if (!data.error) {\n                dispatch(toggleError(''));\n                dispatch(toggleForm(''));\n                const newDates = JSON.parse(newItinerary.dates)\n                dispatch(addItinerary({...newItinerary, dates: newDates, id: data.id}))\n            } else {\n                dispatch(toggleError('Failed To Save'));\n            }\n        }\n        postRequest();\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}